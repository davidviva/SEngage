// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file MsgBase.proto

import Foundation
import ProtocolBuffers


public func == (lhs: Msg, rhs: Msg) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMsgtype == rhs.hasMsgtype) && (!lhs.hasMsgtype || lhs.msgtype == rhs.msgtype)
  fieldCheck = fieldCheck && (lhs.hasBody == rhs.hasBody) && (!lhs.hasBody || lhs.body == rhs.body)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public struct MsgBaseRoot {
  public static var sharedInstance : MsgBaseRoot {
   struct Static {
       static let instance : MsgBaseRoot = MsgBaseRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final public class Msg : GeneratedMessage, GeneratedMessageProtocol {


    //Enum type declaration start 

    public enum Types:Int32, CustomDebugStringConvertible, CustomStringConvertible {
      // MessageType defined for interaction with Client
      case Unknown = 0
      case Login = 1
      case LoginResp = 2
      case Connect = 3
      case ConnectResp = 4
      case Logout = 5
      case ContactUpdate = 6
      case ContactUpdateResp = 7
      case UserTeamUpdate = 8
      case UserTeamUpdateResp = 9
      case GetUserAvatar = 10
      case UserAvatarNotice = 11
      case GetTeamAvatar = 12
      case TeamAvatarNotice = 13
      case UserAvatarChange = 14
      case UserAvatarChangeResp = 15
      case TeamAvatarChange = 16
      case TeamAvatarChangeResp = 17
      case TeamUpdate = 18
      case TeamUpdateResp = 19
      case ContactAdd = 200
      case ContactAddResp = 201
      case ContactRemove = 202
      case ContactRemoveResp = 203
      case GroupCreate = 211
      case GroupCreateResp = 212
      case GroupRemove = 213
      case GroupRemoveResp = 214
      case GroupAddMember = 219
      case GroupAddMemberResp = 220
      case GroupRemoveMember = 221
      case GroupRemoveMemberResp = 222
      case SearchContact = 230
      case SearchContactResult = 231

      // General Message: Peers
      case ChatMessageOutbound = 121
      case ChatMessageOutboundResp = 122
      case ChatMessageInbound = 123

      // General Message: Group
      case GroupMessageOutbound = 125
      case GroupMessageOutboundResp = 126
      case GroupMessageInbound = 127
      case MessageRemove = 135
      case MessageRemoveResp = 136
      case MessageUpdate = 137
      case MessageUpdateResp = 138
      case StatusNotice = 500
      case StatusChange = 501

      public var debugDescription:String { return getDescription() }
      public var description:String { return getDescription() }
      private func getDescription() -> String { 
          switch self {
              case .Unknown: return ".Unknown"
              case .Login: return ".Login"
              case .LoginResp: return ".LoginResp"
              case .Connect: return ".Connect"
              case .ConnectResp: return ".ConnectResp"
              case .Logout: return ".Logout"
              case .ContactUpdate: return ".ContactUpdate"
              case .ContactUpdateResp: return ".ContactUpdateResp"
              case .UserTeamUpdate: return ".UserTeamUpdate"
              case .UserTeamUpdateResp: return ".UserTeamUpdateResp"
              case .GetUserAvatar: return ".GetUserAvatar"
              case .UserAvatarNotice: return ".UserAvatarNotice"
              case .GetTeamAvatar: return ".GetTeamAvatar"
              case .TeamAvatarNotice: return ".TeamAvatarNotice"
              case .UserAvatarChange: return ".UserAvatarChange"
              case .UserAvatarChangeResp: return ".UserAvatarChangeResp"
              case .TeamAvatarChange: return ".TeamAvatarChange"
              case .TeamAvatarChangeResp: return ".TeamAvatarChangeResp"
              case .TeamUpdate: return ".TeamUpdate"
              case .TeamUpdateResp: return ".TeamUpdateResp"
              case .ContactAdd: return ".ContactAdd"
              case .ContactAddResp: return ".ContactAddResp"
              case .ContactRemove: return ".ContactRemove"
              case .ContactRemoveResp: return ".ContactRemoveResp"
              case .GroupCreate: return ".GroupCreate"
              case .GroupCreateResp: return ".GroupCreateResp"
              case .GroupRemove: return ".GroupRemove"
              case .GroupRemoveResp: return ".GroupRemoveResp"
              case .GroupAddMember: return ".GroupAddMember"
              case .GroupAddMemberResp: return ".GroupAddMemberResp"
              case .GroupRemoveMember: return ".GroupRemoveMember"
              case .GroupRemoveMemberResp: return ".GroupRemoveMemberResp"
              case .SearchContact: return ".SearchContact"
              case .SearchContactResult: return ".SearchContactResult"
              case .ChatMessageOutbound: return ".ChatMessageOutbound"
              case .ChatMessageOutboundResp: return ".ChatMessageOutboundResp"
              case .ChatMessageInbound: return ".ChatMessageInbound"
              case .GroupMessageOutbound: return ".GroupMessageOutbound"
              case .GroupMessageOutboundResp: return ".GroupMessageOutboundResp"
              case .GroupMessageInbound: return ".GroupMessageInbound"
              case .MessageRemove: return ".MessageRemove"
              case .MessageRemoveResp: return ".MessageRemoveResp"
              case .MessageUpdate: return ".MessageUpdate"
              case .MessageUpdateResp: return ".MessageUpdateResp"
              case .StatusNotice: return ".StatusNotice"
              case .StatusChange: return ".StatusChange"
          }
      }
    }

    //Enum type declaration end 

  public private(set) var msgtype:Msg.Types = Msg.Types.Unknown
  public private(set) var hasMsgtype:Bool = false
  public private(set) var body:NSData = NSData()

  public private(set) var hasBody:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasMsgtype {
      return false
    }
    if !hasBody {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasMsgtype {
      try output.writeEnum(1, value:msgtype.rawValue)
    }
    if hasBody {
      try output.writeData(2, value:body)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if (hasMsgtype) {
      serialize_size += msgtype.rawValue.computeEnumSize(1)
    }
    if hasBody {
      serialize_size += body.computeDataSize(2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Msg> {
    var mergedArray = Array<Msg>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Msg? {
    return try Msg.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> Msg {
    return try Msg.Builder().mergeFromData(data, extensionRegistry:MsgBaseRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Msg {
    return try Msg.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> Msg {
    return try Msg.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Msg {
    return try Msg.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Msg {
    return try Msg.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Msg {
    return try Msg.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> Msg.Builder {
    return Msg.classBuilder() as! Msg.Builder
  }
  public func getBuilder() -> Msg.Builder {
    return classBuilder() as! Msg.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return Msg.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return Msg.Builder()
  }
  public func toBuilder() throws -> Msg.Builder {
    return try Msg.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:Msg) throws -> Msg.Builder {
    return try Msg.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if (hasMsgtype) {
      output += "\(indent) msgtype: \(msgtype.description)\n"
    }
    if hasBody {
      output += "\(indent) body: \(body) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasMsgtype {
             hashCode = (hashCode &* 31) &+ Int(msgtype.rawValue)
          }
          if hasBody {
             hashCode = (hashCode &* 31) &+ body.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "Msg"
  }
  override public func className() -> String {
      return "Msg"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return Msg.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:Msg = Msg()
    public func getMessage() -> Msg {
        return builderResult
    }

    required override public init () {
       super.init()
    }
      public var hasMsgtype:Bool{
          get {
              return builderResult.hasMsgtype
          }
      }
      public var msgtype:Msg.Types {
          get {
              return builderResult.msgtype
          }
          set (value) {
              builderResult.hasMsgtype = true
              builderResult.msgtype = value
          }
      }
      public func setMsgtype(value:Msg.Types) -> Msg.Builder {
        self.msgtype = value
        return self
      }
      public func clearMsgtype() -> Msg.Builder {
         builderResult.hasMsgtype = false
         builderResult.msgtype = .Unknown
         return self
      }
    public var hasBody:Bool {
         get {
              return builderResult.hasBody
         }
    }
    public var body:NSData {
         get {
              return builderResult.body
         }
         set (value) {
             builderResult.hasBody = true
             builderResult.body = value
         }
    }
    public func setBody(value:NSData) -> Msg.Builder {
      self.body = value
      return self
    }
    public func clearBody() -> Msg.Builder{
         builderResult.hasBody = false
         builderResult.body = NSData()
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Msg.Builder {
      builderResult = Msg()
      return self
    }
    public override func clone() throws -> Msg.Builder {
      return try Msg.builderWithPrototype(builderResult)
    }
    public override func build() throws -> Msg {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Msg {
      let returnMe:Msg = builderResult
      return returnMe
    }
    public func mergeFrom(other:Msg) throws -> Msg.Builder {
      if other == Msg() {
       return self
      }
      if other.hasMsgtype {
           msgtype = other.msgtype
      }
      if other.hasBody {
           body = other.body
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Msg.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Msg.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntmsgtype = try input.readEnum()
          if let enumsmsgtype = Msg.Types(rawValue:valueIntmsgtype){
               msgtype = enumsmsgtype
          } else {
               try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntmsgtype))
          }

        case 18 :
          body = try input.readData()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}


// @@protoc_insertion_point(global_scope)


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file Request.proto

import Foundation
import ProtocolBuffers


public func == (lhs: LoginRequest, rhs: LoginRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ConnectRequest, rhs: ConnectRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
  fieldCheck = fieldCheck && (lhs.hasSessionId == rhs.hasSessionId) && (!lhs.hasSessionId || lhs.sessionId == rhs.sessionId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ContactUpdateRequest, rhs: ContactUpdateRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: UserTeamUpdateRequest, rhs: UserTeamUpdateRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: TeamUpdateRequest, rhs: TeamUpdateRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTeamKey == rhs.hasTeamKey) && (!lhs.hasTeamKey || lhs.teamKey == rhs.teamKey)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: GetUserAvatarRequest, rhs: GetUserAvatarRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: GetTeamAvatarRequest, rhs: GetTeamAvatarRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTeamKey == rhs.hasTeamKey) && (!lhs.hasTeamKey || lhs.teamKey == rhs.teamKey)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: UserAvatarChangeRequest, rhs: UserAvatarChangeRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
  fieldCheck = fieldCheck && (lhs.hasAvatar == rhs.hasAvatar) && (!lhs.hasAvatar || lhs.avatar == rhs.avatar)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: SearchContactRequest, rhs: SearchContactRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKeyword == rhs.hasKeyword) && (!lhs.hasKeyword || lhs.keyword == rhs.keyword)
  fieldCheck = fieldCheck && (lhs.hasPageNum == rhs.hasPageNum) && (!lhs.hasPageNum || lhs.pageNum == rhs.pageNum)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ContactAddRequest, rhs: ContactAddRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ContactRemoveRequest, rhs: ContactRemoveRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: StatusChangeRequest, rhs: StatusChangeRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ChatMessageOutboundRequest, rhs: ChatMessageOutboundRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasReceiver == rhs.hasReceiver) && (!lhs.hasReceiver || lhs.receiver == rhs.receiver)
  fieldCheck = fieldCheck && (lhs.hasContent == rhs.hasContent) && (!lhs.hasContent || lhs.content == rhs.content)
  fieldCheck = fieldCheck && (lhs.hasMsgKey == rhs.hasMsgKey) && (!lhs.hasMsgKey || lhs.msgKey == rhs.msgKey)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: MessageRemoveRequest, rhs: MessageRemoveRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMsgKey == rhs.hasMsgKey) && (!lhs.hasMsgKey || lhs.msgKey == rhs.msgKey)
  fieldCheck = fieldCheck && (lhs.hasIsTeam == rhs.hasIsTeam) && (!lhs.hasIsTeam || lhs.isTeam == rhs.isTeam)
  fieldCheck = fieldCheck && (lhs.hasSender == rhs.hasSender) && (!lhs.hasSender || lhs.sender == rhs.sender)
  fieldCheck = fieldCheck && (lhs.hasReceiver == rhs.hasReceiver) && (!lhs.hasReceiver || lhs.receiver == rhs.receiver)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: GroupCreateRequest, rhs: GroupCreateRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTeamName == rhs.hasTeamName) && (!lhs.hasTeamName || lhs.teamName == rhs.teamName)
  fieldCheck = fieldCheck && (lhs.members == rhs.members)
  fieldCheck = fieldCheck && (lhs.hasAvatar == rhs.hasAvatar) && (!lhs.hasAvatar || lhs.avatar == rhs.avatar)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: GroupRemoveRequest, rhs: GroupRemoveRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTeamKey == rhs.hasTeamKey) && (!lhs.hasTeamKey || lhs.teamKey == rhs.teamKey)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: GroupAddMemberRequest, rhs: GroupAddMemberRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTeamKey == rhs.hasTeamKey) && (!lhs.hasTeamKey || lhs.teamKey == rhs.teamKey)
  fieldCheck = fieldCheck && (lhs.hasMember == rhs.hasMember) && (!lhs.hasMember || lhs.member == rhs.member)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: GroupRemoveMemberRequest, rhs: GroupRemoveMemberRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTeamKey == rhs.hasTeamKey) && (!lhs.hasTeamKey || lhs.teamKey == rhs.teamKey)
  fieldCheck = fieldCheck && (lhs.hasMember == rhs.hasMember) && (!lhs.hasMember || lhs.member == rhs.member)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: GroupMessageOutboundRequest, rhs: GroupMessageOutboundRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTeamKey == rhs.hasTeamKey) && (!lhs.hasTeamKey || lhs.teamKey == rhs.teamKey)
  fieldCheck = fieldCheck && (lhs.hasContent == rhs.hasContent) && (!lhs.hasContent || lhs.content == rhs.content)
  fieldCheck = fieldCheck && (lhs.hasMsgKey == rhs.hasMsgKey) && (!lhs.hasMsgKey || lhs.msgKey == rhs.msgKey)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public struct RequestRoot {
  public static var sharedInstance : RequestRoot {
   struct Static {
       static let instance : RequestRoot = RequestRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final public class LoginRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var username:String = ""

  public private(set) var hasUsername:Bool = false
  public private(set) var password:String = ""

  public private(set) var hasPassword:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasUsername {
      try output.writeString(1, value:username)
    }
    if hasPassword {
      try output.writeString(2, value:password)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasUsername {
      serialize_size += username.computeStringSize(1)
    }
    if hasPassword {
      serialize_size += password.computeStringSize(2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<LoginRequest> {
    var mergedArray = Array<LoginRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> LoginRequest? {
    return try LoginRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> LoginRequest {
    return try LoginRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> LoginRequest {
    return try LoginRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> LoginRequest {
    return try LoginRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> LoginRequest {
    return try LoginRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> LoginRequest {
    return try LoginRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LoginRequest {
    return try LoginRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> LoginRequest.Builder {
    return LoginRequest.classBuilder() as! LoginRequest.Builder
  }
  public func getBuilder() -> LoginRequest.Builder {
    return classBuilder() as! LoginRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return LoginRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return LoginRequest.Builder()
  }
  public func toBuilder() throws -> LoginRequest.Builder {
    return try LoginRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:LoginRequest) throws -> LoginRequest.Builder {
    return try LoginRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasUsername {
      output += "\(indent) username: \(username) \n"
    }
    if hasPassword {
      output += "\(indent) password: \(password) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUsername {
             hashCode = (hashCode &* 31) &+ username.hashValue
          }
          if hasPassword {
             hashCode = (hashCode &* 31) &+ password.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "LoginRequest"
  }
  override public func className() -> String {
      return "LoginRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return LoginRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:LoginRequest = LoginRequest()
    public func getMessage() -> LoginRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasUsername:Bool {
         get {
              return builderResult.hasUsername
         }
    }
    public var username:String {
         get {
              return builderResult.username
         }
         set (value) {
             builderResult.hasUsername = true
             builderResult.username = value
         }
    }
    public func setUsername(value:String) -> LoginRequest.Builder {
      self.username = value
      return self
    }
    public func clearUsername() -> LoginRequest.Builder{
         builderResult.hasUsername = false
         builderResult.username = ""
         return self
    }
    public var hasPassword:Bool {
         get {
              return builderResult.hasPassword
         }
    }
    public var password:String {
         get {
              return builderResult.password
         }
         set (value) {
             builderResult.hasPassword = true
             builderResult.password = value
         }
    }
    public func setPassword(value:String) -> LoginRequest.Builder {
      self.password = value
      return self
    }
    public func clearPassword() -> LoginRequest.Builder{
         builderResult.hasPassword = false
         builderResult.password = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> LoginRequest.Builder {
      builderResult = LoginRequest()
      return self
    }
    public override func clone() throws -> LoginRequest.Builder {
      return try LoginRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> LoginRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> LoginRequest {
      let returnMe:LoginRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:LoginRequest) throws -> LoginRequest.Builder {
      if other == LoginRequest() {
       return self
      }
      if other.hasUsername {
           username = other.username
      }
      if other.hasPassword {
           password = other.password
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> LoginRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> LoginRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          username = try input.readString()

        case 18 :
          password = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class ConnectRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var username:String = ""

  public private(set) var hasUsername:Bool = false
  public private(set) var token:String = ""

  public private(set) var hasToken:Bool = false
  public private(set) var sessionId:String = ""

  public private(set) var hasSessionId:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasUsername {
      try output.writeString(1, value:username)
    }
    if hasToken {
      try output.writeString(2, value:token)
    }
    if hasSessionId {
      try output.writeString(3, value:sessionId)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasUsername {
      serialize_size += username.computeStringSize(1)
    }
    if hasToken {
      serialize_size += token.computeStringSize(2)
    }
    if hasSessionId {
      serialize_size += sessionId.computeStringSize(3)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ConnectRequest> {
    var mergedArray = Array<ConnectRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ConnectRequest? {
    return try ConnectRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> ConnectRequest {
    return try ConnectRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ConnectRequest {
    return try ConnectRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> ConnectRequest {
    return try ConnectRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ConnectRequest {
    return try ConnectRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ConnectRequest {
    return try ConnectRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ConnectRequest {
    return try ConnectRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> ConnectRequest.Builder {
    return ConnectRequest.classBuilder() as! ConnectRequest.Builder
  }
  public func getBuilder() -> ConnectRequest.Builder {
    return classBuilder() as! ConnectRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return ConnectRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return ConnectRequest.Builder()
  }
  public func toBuilder() throws -> ConnectRequest.Builder {
    return try ConnectRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:ConnectRequest) throws -> ConnectRequest.Builder {
    return try ConnectRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasUsername {
      output += "\(indent) username: \(username) \n"
    }
    if hasToken {
      output += "\(indent) token: \(token) \n"
    }
    if hasSessionId {
      output += "\(indent) sessionId: \(sessionId) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUsername {
             hashCode = (hashCode &* 31) &+ username.hashValue
          }
          if hasToken {
             hashCode = (hashCode &* 31) &+ token.hashValue
          }
          if hasSessionId {
             hashCode = (hashCode &* 31) &+ sessionId.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "ConnectRequest"
  }
  override public func className() -> String {
      return "ConnectRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return ConnectRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:ConnectRequest = ConnectRequest()
    public func getMessage() -> ConnectRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasUsername:Bool {
         get {
              return builderResult.hasUsername
         }
    }
    public var username:String {
         get {
              return builderResult.username
         }
         set (value) {
             builderResult.hasUsername = true
             builderResult.username = value
         }
    }
    public func setUsername(value:String) -> ConnectRequest.Builder {
      self.username = value
      return self
    }
    public func clearUsername() -> ConnectRequest.Builder{
         builderResult.hasUsername = false
         builderResult.username = ""
         return self
    }
    public var hasToken:Bool {
         get {
              return builderResult.hasToken
         }
    }
    public var token:String {
         get {
              return builderResult.token
         }
         set (value) {
             builderResult.hasToken = true
             builderResult.token = value
         }
    }
    public func setToken(value:String) -> ConnectRequest.Builder {
      self.token = value
      return self
    }
    public func clearToken() -> ConnectRequest.Builder{
         builderResult.hasToken = false
         builderResult.token = ""
         return self
    }
    public var hasSessionId:Bool {
         get {
              return builderResult.hasSessionId
         }
    }
    public var sessionId:String {
         get {
              return builderResult.sessionId
         }
         set (value) {
             builderResult.hasSessionId = true
             builderResult.sessionId = value
         }
    }
    public func setSessionId(value:String) -> ConnectRequest.Builder {
      self.sessionId = value
      return self
    }
    public func clearSessionId() -> ConnectRequest.Builder{
         builderResult.hasSessionId = false
         builderResult.sessionId = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> ConnectRequest.Builder {
      builderResult = ConnectRequest()
      return self
    }
    public override func clone() throws -> ConnectRequest.Builder {
      return try ConnectRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> ConnectRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> ConnectRequest {
      let returnMe:ConnectRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:ConnectRequest) throws -> ConnectRequest.Builder {
      if other == ConnectRequest() {
       return self
      }
      if other.hasUsername {
           username = other.username
      }
      if other.hasToken {
           token = other.token
      }
      if other.hasSessionId {
           sessionId = other.sessionId
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ConnectRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ConnectRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          username = try input.readString()

        case 18 :
          token = try input.readString()

        case 26 :
          sessionId = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class ContactUpdateRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var username:String = ""

  public private(set) var hasUsername:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasUsername {
      try output.writeString(1, value:username)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasUsername {
      serialize_size += username.computeStringSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ContactUpdateRequest> {
    var mergedArray = Array<ContactUpdateRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ContactUpdateRequest? {
    return try ContactUpdateRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> ContactUpdateRequest {
    return try ContactUpdateRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ContactUpdateRequest {
    return try ContactUpdateRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> ContactUpdateRequest {
    return try ContactUpdateRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ContactUpdateRequest {
    return try ContactUpdateRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ContactUpdateRequest {
    return try ContactUpdateRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ContactUpdateRequest {
    return try ContactUpdateRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> ContactUpdateRequest.Builder {
    return ContactUpdateRequest.classBuilder() as! ContactUpdateRequest.Builder
  }
  public func getBuilder() -> ContactUpdateRequest.Builder {
    return classBuilder() as! ContactUpdateRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return ContactUpdateRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return ContactUpdateRequest.Builder()
  }
  public func toBuilder() throws -> ContactUpdateRequest.Builder {
    return try ContactUpdateRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:ContactUpdateRequest) throws -> ContactUpdateRequest.Builder {
    return try ContactUpdateRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasUsername {
      output += "\(indent) username: \(username) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUsername {
             hashCode = (hashCode &* 31) &+ username.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "ContactUpdateRequest"
  }
  override public func className() -> String {
      return "ContactUpdateRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return ContactUpdateRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:ContactUpdateRequest = ContactUpdateRequest()
    public func getMessage() -> ContactUpdateRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasUsername:Bool {
         get {
              return builderResult.hasUsername
         }
    }
    public var username:String {
         get {
              return builderResult.username
         }
         set (value) {
             builderResult.hasUsername = true
             builderResult.username = value
         }
    }
    public func setUsername(value:String) -> ContactUpdateRequest.Builder {
      self.username = value
      return self
    }
    public func clearUsername() -> ContactUpdateRequest.Builder{
         builderResult.hasUsername = false
         builderResult.username = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> ContactUpdateRequest.Builder {
      builderResult = ContactUpdateRequest()
      return self
    }
    public override func clone() throws -> ContactUpdateRequest.Builder {
      return try ContactUpdateRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> ContactUpdateRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> ContactUpdateRequest {
      let returnMe:ContactUpdateRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:ContactUpdateRequest) throws -> ContactUpdateRequest.Builder {
      if other == ContactUpdateRequest() {
       return self
      }
      if other.hasUsername {
           username = other.username
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ContactUpdateRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ContactUpdateRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          username = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class UserTeamUpdateRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var username:String = ""

  public private(set) var hasUsername:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasUsername {
      try output.writeString(1, value:username)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasUsername {
      serialize_size += username.computeStringSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<UserTeamUpdateRequest> {
    var mergedArray = Array<UserTeamUpdateRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> UserTeamUpdateRequest? {
    return try UserTeamUpdateRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> UserTeamUpdateRequest {
    return try UserTeamUpdateRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> UserTeamUpdateRequest {
    return try UserTeamUpdateRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> UserTeamUpdateRequest {
    return try UserTeamUpdateRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> UserTeamUpdateRequest {
    return try UserTeamUpdateRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> UserTeamUpdateRequest {
    return try UserTeamUpdateRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserTeamUpdateRequest {
    return try UserTeamUpdateRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> UserTeamUpdateRequest.Builder {
    return UserTeamUpdateRequest.classBuilder() as! UserTeamUpdateRequest.Builder
  }
  public func getBuilder() -> UserTeamUpdateRequest.Builder {
    return classBuilder() as! UserTeamUpdateRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return UserTeamUpdateRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return UserTeamUpdateRequest.Builder()
  }
  public func toBuilder() throws -> UserTeamUpdateRequest.Builder {
    return try UserTeamUpdateRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:UserTeamUpdateRequest) throws -> UserTeamUpdateRequest.Builder {
    return try UserTeamUpdateRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasUsername {
      output += "\(indent) username: \(username) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUsername {
             hashCode = (hashCode &* 31) &+ username.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "UserTeamUpdateRequest"
  }
  override public func className() -> String {
      return "UserTeamUpdateRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return UserTeamUpdateRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:UserTeamUpdateRequest = UserTeamUpdateRequest()
    public func getMessage() -> UserTeamUpdateRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasUsername:Bool {
         get {
              return builderResult.hasUsername
         }
    }
    public var username:String {
         get {
              return builderResult.username
         }
         set (value) {
             builderResult.hasUsername = true
             builderResult.username = value
         }
    }
    public func setUsername(value:String) -> UserTeamUpdateRequest.Builder {
      self.username = value
      return self
    }
    public func clearUsername() -> UserTeamUpdateRequest.Builder{
         builderResult.hasUsername = false
         builderResult.username = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> UserTeamUpdateRequest.Builder {
      builderResult = UserTeamUpdateRequest()
      return self
    }
    public override func clone() throws -> UserTeamUpdateRequest.Builder {
      return try UserTeamUpdateRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> UserTeamUpdateRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> UserTeamUpdateRequest {
      let returnMe:UserTeamUpdateRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:UserTeamUpdateRequest) throws -> UserTeamUpdateRequest.Builder {
      if other == UserTeamUpdateRequest() {
       return self
      }
      if other.hasUsername {
           username = other.username
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> UserTeamUpdateRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserTeamUpdateRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          username = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class TeamUpdateRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var teamKey:String = ""

  public private(set) var hasTeamKey:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasTeamKey {
      try output.writeString(1, value:teamKey)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasTeamKey {
      serialize_size += teamKey.computeStringSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<TeamUpdateRequest> {
    var mergedArray = Array<TeamUpdateRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> TeamUpdateRequest? {
    return try TeamUpdateRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> TeamUpdateRequest {
    return try TeamUpdateRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> TeamUpdateRequest {
    return try TeamUpdateRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> TeamUpdateRequest {
    return try TeamUpdateRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> TeamUpdateRequest {
    return try TeamUpdateRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> TeamUpdateRequest {
    return try TeamUpdateRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> TeamUpdateRequest {
    return try TeamUpdateRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> TeamUpdateRequest.Builder {
    return TeamUpdateRequest.classBuilder() as! TeamUpdateRequest.Builder
  }
  public func getBuilder() -> TeamUpdateRequest.Builder {
    return classBuilder() as! TeamUpdateRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return TeamUpdateRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return TeamUpdateRequest.Builder()
  }
  public func toBuilder() throws -> TeamUpdateRequest.Builder {
    return try TeamUpdateRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:TeamUpdateRequest) throws -> TeamUpdateRequest.Builder {
    return try TeamUpdateRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasTeamKey {
      output += "\(indent) teamKey: \(teamKey) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTeamKey {
             hashCode = (hashCode &* 31) &+ teamKey.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "TeamUpdateRequest"
  }
  override public func className() -> String {
      return "TeamUpdateRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return TeamUpdateRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:TeamUpdateRequest = TeamUpdateRequest()
    public func getMessage() -> TeamUpdateRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasTeamKey:Bool {
         get {
              return builderResult.hasTeamKey
         }
    }
    public var teamKey:String {
         get {
              return builderResult.teamKey
         }
         set (value) {
             builderResult.hasTeamKey = true
             builderResult.teamKey = value
         }
    }
    public func setTeamKey(value:String) -> TeamUpdateRequest.Builder {
      self.teamKey = value
      return self
    }
    public func clearTeamKey() -> TeamUpdateRequest.Builder{
         builderResult.hasTeamKey = false
         builderResult.teamKey = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> TeamUpdateRequest.Builder {
      builderResult = TeamUpdateRequest()
      return self
    }
    public override func clone() throws -> TeamUpdateRequest.Builder {
      return try TeamUpdateRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> TeamUpdateRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> TeamUpdateRequest {
      let returnMe:TeamUpdateRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:TeamUpdateRequest) throws -> TeamUpdateRequest.Builder {
      if other == TeamUpdateRequest() {
       return self
      }
      if other.hasTeamKey {
           teamKey = other.teamKey
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> TeamUpdateRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> TeamUpdateRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          teamKey = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class GetUserAvatarRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var username:String = ""

  public private(set) var hasUsername:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasUsername {
      try output.writeString(1, value:username)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasUsername {
      serialize_size += username.computeStringSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<GetUserAvatarRequest> {
    var mergedArray = Array<GetUserAvatarRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> GetUserAvatarRequest? {
    return try GetUserAvatarRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> GetUserAvatarRequest {
    return try GetUserAvatarRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> GetUserAvatarRequest {
    return try GetUserAvatarRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> GetUserAvatarRequest {
    return try GetUserAvatarRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> GetUserAvatarRequest {
    return try GetUserAvatarRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> GetUserAvatarRequest {
    return try GetUserAvatarRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GetUserAvatarRequest {
    return try GetUserAvatarRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> GetUserAvatarRequest.Builder {
    return GetUserAvatarRequest.classBuilder() as! GetUserAvatarRequest.Builder
  }
  public func getBuilder() -> GetUserAvatarRequest.Builder {
    return classBuilder() as! GetUserAvatarRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return GetUserAvatarRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return GetUserAvatarRequest.Builder()
  }
  public func toBuilder() throws -> GetUserAvatarRequest.Builder {
    return try GetUserAvatarRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:GetUserAvatarRequest) throws -> GetUserAvatarRequest.Builder {
    return try GetUserAvatarRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasUsername {
      output += "\(indent) username: \(username) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUsername {
             hashCode = (hashCode &* 31) &+ username.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "GetUserAvatarRequest"
  }
  override public func className() -> String {
      return "GetUserAvatarRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return GetUserAvatarRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:GetUserAvatarRequest = GetUserAvatarRequest()
    public func getMessage() -> GetUserAvatarRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasUsername:Bool {
         get {
              return builderResult.hasUsername
         }
    }
    public var username:String {
         get {
              return builderResult.username
         }
         set (value) {
             builderResult.hasUsername = true
             builderResult.username = value
         }
    }
    public func setUsername(value:String) -> GetUserAvatarRequest.Builder {
      self.username = value
      return self
    }
    public func clearUsername() -> GetUserAvatarRequest.Builder{
         builderResult.hasUsername = false
         builderResult.username = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> GetUserAvatarRequest.Builder {
      builderResult = GetUserAvatarRequest()
      return self
    }
    public override func clone() throws -> GetUserAvatarRequest.Builder {
      return try GetUserAvatarRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> GetUserAvatarRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> GetUserAvatarRequest {
      let returnMe:GetUserAvatarRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:GetUserAvatarRequest) throws -> GetUserAvatarRequest.Builder {
      if other == GetUserAvatarRequest() {
       return self
      }
      if other.hasUsername {
           username = other.username
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> GetUserAvatarRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GetUserAvatarRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          username = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class GetTeamAvatarRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var teamKey:String = ""

  public private(set) var hasTeamKey:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasTeamKey {
      try output.writeString(1, value:teamKey)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasTeamKey {
      serialize_size += teamKey.computeStringSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<GetTeamAvatarRequest> {
    var mergedArray = Array<GetTeamAvatarRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> GetTeamAvatarRequest? {
    return try GetTeamAvatarRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> GetTeamAvatarRequest {
    return try GetTeamAvatarRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> GetTeamAvatarRequest {
    return try GetTeamAvatarRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> GetTeamAvatarRequest {
    return try GetTeamAvatarRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> GetTeamAvatarRequest {
    return try GetTeamAvatarRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> GetTeamAvatarRequest {
    return try GetTeamAvatarRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GetTeamAvatarRequest {
    return try GetTeamAvatarRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> GetTeamAvatarRequest.Builder {
    return GetTeamAvatarRequest.classBuilder() as! GetTeamAvatarRequest.Builder
  }
  public func getBuilder() -> GetTeamAvatarRequest.Builder {
    return classBuilder() as! GetTeamAvatarRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return GetTeamAvatarRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return GetTeamAvatarRequest.Builder()
  }
  public func toBuilder() throws -> GetTeamAvatarRequest.Builder {
    return try GetTeamAvatarRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:GetTeamAvatarRequest) throws -> GetTeamAvatarRequest.Builder {
    return try GetTeamAvatarRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasTeamKey {
      output += "\(indent) teamKey: \(teamKey) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTeamKey {
             hashCode = (hashCode &* 31) &+ teamKey.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "GetTeamAvatarRequest"
  }
  override public func className() -> String {
      return "GetTeamAvatarRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return GetTeamAvatarRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:GetTeamAvatarRequest = GetTeamAvatarRequest()
    public func getMessage() -> GetTeamAvatarRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasTeamKey:Bool {
         get {
              return builderResult.hasTeamKey
         }
    }
    public var teamKey:String {
         get {
              return builderResult.teamKey
         }
         set (value) {
             builderResult.hasTeamKey = true
             builderResult.teamKey = value
         }
    }
    public func setTeamKey(value:String) -> GetTeamAvatarRequest.Builder {
      self.teamKey = value
      return self
    }
    public func clearTeamKey() -> GetTeamAvatarRequest.Builder{
         builderResult.hasTeamKey = false
         builderResult.teamKey = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> GetTeamAvatarRequest.Builder {
      builderResult = GetTeamAvatarRequest()
      return self
    }
    public override func clone() throws -> GetTeamAvatarRequest.Builder {
      return try GetTeamAvatarRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> GetTeamAvatarRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> GetTeamAvatarRequest {
      let returnMe:GetTeamAvatarRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:GetTeamAvatarRequest) throws -> GetTeamAvatarRequest.Builder {
      if other == GetTeamAvatarRequest() {
       return self
      }
      if other.hasTeamKey {
           teamKey = other.teamKey
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> GetTeamAvatarRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GetTeamAvatarRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          teamKey = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class UserAvatarChangeRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var user:String = ""

  public private(set) var hasUser:Bool = false
  public private(set) var avatar:NSData = NSData()

  public private(set) var hasAvatar:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasUser {
      try output.writeString(1, value:user)
    }
    if hasAvatar {
      try output.writeData(2, value:avatar)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasUser {
      serialize_size += user.computeStringSize(1)
    }
    if hasAvatar {
      serialize_size += avatar.computeDataSize(2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<UserAvatarChangeRequest> {
    var mergedArray = Array<UserAvatarChangeRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> UserAvatarChangeRequest? {
    return try UserAvatarChangeRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> UserAvatarChangeRequest {
    return try UserAvatarChangeRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> UserAvatarChangeRequest {
    return try UserAvatarChangeRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> UserAvatarChangeRequest {
    return try UserAvatarChangeRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> UserAvatarChangeRequest {
    return try UserAvatarChangeRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> UserAvatarChangeRequest {
    return try UserAvatarChangeRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserAvatarChangeRequest {
    return try UserAvatarChangeRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> UserAvatarChangeRequest.Builder {
    return UserAvatarChangeRequest.classBuilder() as! UserAvatarChangeRequest.Builder
  }
  public func getBuilder() -> UserAvatarChangeRequest.Builder {
    return classBuilder() as! UserAvatarChangeRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return UserAvatarChangeRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return UserAvatarChangeRequest.Builder()
  }
  public func toBuilder() throws -> UserAvatarChangeRequest.Builder {
    return try UserAvatarChangeRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:UserAvatarChangeRequest) throws -> UserAvatarChangeRequest.Builder {
    return try UserAvatarChangeRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasUser {
      output += "\(indent) user: \(user) \n"
    }
    if hasAvatar {
      output += "\(indent) avatar: \(avatar) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUser {
             hashCode = (hashCode &* 31) &+ user.hashValue
          }
          if hasAvatar {
             hashCode = (hashCode &* 31) &+ avatar.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "UserAvatarChangeRequest"
  }
  override public func className() -> String {
      return "UserAvatarChangeRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return UserAvatarChangeRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:UserAvatarChangeRequest = UserAvatarChangeRequest()
    public func getMessage() -> UserAvatarChangeRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasUser:Bool {
         get {
              return builderResult.hasUser
         }
    }
    public var user:String {
         get {
              return builderResult.user
         }
         set (value) {
             builderResult.hasUser = true
             builderResult.user = value
         }
    }
    public func setUser(value:String) -> UserAvatarChangeRequest.Builder {
      self.user = value
      return self
    }
    public func clearUser() -> UserAvatarChangeRequest.Builder{
         builderResult.hasUser = false
         builderResult.user = ""
         return self
    }
    public var hasAvatar:Bool {
         get {
              return builderResult.hasAvatar
         }
    }
    public var avatar:NSData {
         get {
              return builderResult.avatar
         }
         set (value) {
             builderResult.hasAvatar = true
             builderResult.avatar = value
         }
    }
    public func setAvatar(value:NSData) -> UserAvatarChangeRequest.Builder {
      self.avatar = value
      return self
    }
    public func clearAvatar() -> UserAvatarChangeRequest.Builder{
         builderResult.hasAvatar = false
         builderResult.avatar = NSData()
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> UserAvatarChangeRequest.Builder {
      builderResult = UserAvatarChangeRequest()
      return self
    }
    public override func clone() throws -> UserAvatarChangeRequest.Builder {
      return try UserAvatarChangeRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> UserAvatarChangeRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> UserAvatarChangeRequest {
      let returnMe:UserAvatarChangeRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:UserAvatarChangeRequest) throws -> UserAvatarChangeRequest.Builder {
      if other == UserAvatarChangeRequest() {
       return self
      }
      if other.hasUser {
           user = other.user
      }
      if other.hasAvatar {
           avatar = other.avatar
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> UserAvatarChangeRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserAvatarChangeRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          user = try input.readString()

        case 18 :
          avatar = try input.readData()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class SearchContactRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var keyword:String = ""

  public private(set) var hasKeyword:Bool = false
  public private(set) var pageNum:Int32 = Int32(0)

  public private(set) var hasPageNum:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasKeyword {
      try output.writeString(1, value:keyword)
    }
    if hasPageNum {
      try output.writeInt32(2, value:pageNum)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasKeyword {
      serialize_size += keyword.computeStringSize(1)
    }
    if hasPageNum {
      serialize_size += pageNum.computeInt32Size(2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<SearchContactRequest> {
    var mergedArray = Array<SearchContactRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> SearchContactRequest? {
    return try SearchContactRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> SearchContactRequest {
    return try SearchContactRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> SearchContactRequest {
    return try SearchContactRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> SearchContactRequest {
    return try SearchContactRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> SearchContactRequest {
    return try SearchContactRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> SearchContactRequest {
    return try SearchContactRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SearchContactRequest {
    return try SearchContactRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> SearchContactRequest.Builder {
    return SearchContactRequest.classBuilder() as! SearchContactRequest.Builder
  }
  public func getBuilder() -> SearchContactRequest.Builder {
    return classBuilder() as! SearchContactRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return SearchContactRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return SearchContactRequest.Builder()
  }
  public func toBuilder() throws -> SearchContactRequest.Builder {
    return try SearchContactRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:SearchContactRequest) throws -> SearchContactRequest.Builder {
    return try SearchContactRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasKeyword {
      output += "\(indent) keyword: \(keyword) \n"
    }
    if hasPageNum {
      output += "\(indent) pageNum: \(pageNum) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasKeyword {
             hashCode = (hashCode &* 31) &+ keyword.hashValue
          }
          if hasPageNum {
             hashCode = (hashCode &* 31) &+ pageNum.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "SearchContactRequest"
  }
  override public func className() -> String {
      return "SearchContactRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return SearchContactRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:SearchContactRequest = SearchContactRequest()
    public func getMessage() -> SearchContactRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasKeyword:Bool {
         get {
              return builderResult.hasKeyword
         }
    }
    public var keyword:String {
         get {
              return builderResult.keyword
         }
         set (value) {
             builderResult.hasKeyword = true
             builderResult.keyword = value
         }
    }
    public func setKeyword(value:String) -> SearchContactRequest.Builder {
      self.keyword = value
      return self
    }
    public func clearKeyword() -> SearchContactRequest.Builder{
         builderResult.hasKeyword = false
         builderResult.keyword = ""
         return self
    }
    public var hasPageNum:Bool {
         get {
              return builderResult.hasPageNum
         }
    }
    public var pageNum:Int32 {
         get {
              return builderResult.pageNum
         }
         set (value) {
             builderResult.hasPageNum = true
             builderResult.pageNum = value
         }
    }
    public func setPageNum(value:Int32) -> SearchContactRequest.Builder {
      self.pageNum = value
      return self
    }
    public func clearPageNum() -> SearchContactRequest.Builder{
         builderResult.hasPageNum = false
         builderResult.pageNum = Int32(0)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> SearchContactRequest.Builder {
      builderResult = SearchContactRequest()
      return self
    }
    public override func clone() throws -> SearchContactRequest.Builder {
      return try SearchContactRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> SearchContactRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> SearchContactRequest {
      let returnMe:SearchContactRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:SearchContactRequest) throws -> SearchContactRequest.Builder {
      if other == SearchContactRequest() {
       return self
      }
      if other.hasKeyword {
           keyword = other.keyword
      }
      if other.hasPageNum {
           pageNum = other.pageNum
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> SearchContactRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SearchContactRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          keyword = try input.readString()

        case 16 :
          pageNum = try input.readInt32()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class ContactAddRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var username:String = ""

  public private(set) var hasUsername:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasUsername {
      try output.writeString(1, value:username)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasUsername {
      serialize_size += username.computeStringSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ContactAddRequest> {
    var mergedArray = Array<ContactAddRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ContactAddRequest? {
    return try ContactAddRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> ContactAddRequest {
    return try ContactAddRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ContactAddRequest {
    return try ContactAddRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> ContactAddRequest {
    return try ContactAddRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ContactAddRequest {
    return try ContactAddRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ContactAddRequest {
    return try ContactAddRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ContactAddRequest {
    return try ContactAddRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> ContactAddRequest.Builder {
    return ContactAddRequest.classBuilder() as! ContactAddRequest.Builder
  }
  public func getBuilder() -> ContactAddRequest.Builder {
    return classBuilder() as! ContactAddRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return ContactAddRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return ContactAddRequest.Builder()
  }
  public func toBuilder() throws -> ContactAddRequest.Builder {
    return try ContactAddRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:ContactAddRequest) throws -> ContactAddRequest.Builder {
    return try ContactAddRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasUsername {
      output += "\(indent) username: \(username) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUsername {
             hashCode = (hashCode &* 31) &+ username.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "ContactAddRequest"
  }
  override public func className() -> String {
      return "ContactAddRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return ContactAddRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:ContactAddRequest = ContactAddRequest()
    public func getMessage() -> ContactAddRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasUsername:Bool {
         get {
              return builderResult.hasUsername
         }
    }
    public var username:String {
         get {
              return builderResult.username
         }
         set (value) {
             builderResult.hasUsername = true
             builderResult.username = value
         }
    }
    public func setUsername(value:String) -> ContactAddRequest.Builder {
      self.username = value
      return self
    }
    public func clearUsername() -> ContactAddRequest.Builder{
         builderResult.hasUsername = false
         builderResult.username = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> ContactAddRequest.Builder {
      builderResult = ContactAddRequest()
      return self
    }
    public override func clone() throws -> ContactAddRequest.Builder {
      return try ContactAddRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> ContactAddRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> ContactAddRequest {
      let returnMe:ContactAddRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:ContactAddRequest) throws -> ContactAddRequest.Builder {
      if other == ContactAddRequest() {
       return self
      }
      if other.hasUsername {
           username = other.username
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ContactAddRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ContactAddRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          username = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class ContactRemoveRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var username:String = ""

  public private(set) var hasUsername:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasUsername {
      try output.writeString(1, value:username)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasUsername {
      serialize_size += username.computeStringSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ContactRemoveRequest> {
    var mergedArray = Array<ContactRemoveRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ContactRemoveRequest? {
    return try ContactRemoveRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> ContactRemoveRequest {
    return try ContactRemoveRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ContactRemoveRequest {
    return try ContactRemoveRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> ContactRemoveRequest {
    return try ContactRemoveRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ContactRemoveRequest {
    return try ContactRemoveRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ContactRemoveRequest {
    return try ContactRemoveRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ContactRemoveRequest {
    return try ContactRemoveRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> ContactRemoveRequest.Builder {
    return ContactRemoveRequest.classBuilder() as! ContactRemoveRequest.Builder
  }
  public func getBuilder() -> ContactRemoveRequest.Builder {
    return classBuilder() as! ContactRemoveRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return ContactRemoveRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return ContactRemoveRequest.Builder()
  }
  public func toBuilder() throws -> ContactRemoveRequest.Builder {
    return try ContactRemoveRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:ContactRemoveRequest) throws -> ContactRemoveRequest.Builder {
    return try ContactRemoveRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasUsername {
      output += "\(indent) username: \(username) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUsername {
             hashCode = (hashCode &* 31) &+ username.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "ContactRemoveRequest"
  }
  override public func className() -> String {
      return "ContactRemoveRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return ContactRemoveRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:ContactRemoveRequest = ContactRemoveRequest()
    public func getMessage() -> ContactRemoveRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasUsername:Bool {
         get {
              return builderResult.hasUsername
         }
    }
    public var username:String {
         get {
              return builderResult.username
         }
         set (value) {
             builderResult.hasUsername = true
             builderResult.username = value
         }
    }
    public func setUsername(value:String) -> ContactRemoveRequest.Builder {
      self.username = value
      return self
    }
    public func clearUsername() -> ContactRemoveRequest.Builder{
         builderResult.hasUsername = false
         builderResult.username = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> ContactRemoveRequest.Builder {
      builderResult = ContactRemoveRequest()
      return self
    }
    public override func clone() throws -> ContactRemoveRequest.Builder {
      return try ContactRemoveRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> ContactRemoveRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> ContactRemoveRequest {
      let returnMe:ContactRemoveRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:ContactRemoveRequest) throws -> ContactRemoveRequest.Builder {
      if other == ContactRemoveRequest() {
       return self
      }
      if other.hasUsername {
           username = other.username
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ContactRemoveRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ContactRemoveRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          username = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class StatusChangeRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var status:Int32 = Int32(0)

  public private(set) var hasStatus:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasStatus {
      try output.writeInt32(1, value:status)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasStatus {
      serialize_size += status.computeInt32Size(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<StatusChangeRequest> {
    var mergedArray = Array<StatusChangeRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> StatusChangeRequest? {
    return try StatusChangeRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> StatusChangeRequest {
    return try StatusChangeRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> StatusChangeRequest {
    return try StatusChangeRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> StatusChangeRequest {
    return try StatusChangeRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> StatusChangeRequest {
    return try StatusChangeRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> StatusChangeRequest {
    return try StatusChangeRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> StatusChangeRequest {
    return try StatusChangeRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> StatusChangeRequest.Builder {
    return StatusChangeRequest.classBuilder() as! StatusChangeRequest.Builder
  }
  public func getBuilder() -> StatusChangeRequest.Builder {
    return classBuilder() as! StatusChangeRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return StatusChangeRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return StatusChangeRequest.Builder()
  }
  public func toBuilder() throws -> StatusChangeRequest.Builder {
    return try StatusChangeRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:StatusChangeRequest) throws -> StatusChangeRequest.Builder {
    return try StatusChangeRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasStatus {
      output += "\(indent) status: \(status) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasStatus {
             hashCode = (hashCode &* 31) &+ status.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "StatusChangeRequest"
  }
  override public func className() -> String {
      return "StatusChangeRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return StatusChangeRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:StatusChangeRequest = StatusChangeRequest()
    public func getMessage() -> StatusChangeRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasStatus:Bool {
         get {
              return builderResult.hasStatus
         }
    }
    public var status:Int32 {
         get {
              return builderResult.status
         }
         set (value) {
             builderResult.hasStatus = true
             builderResult.status = value
         }
    }
    public func setStatus(value:Int32) -> StatusChangeRequest.Builder {
      self.status = value
      return self
    }
    public func clearStatus() -> StatusChangeRequest.Builder{
         builderResult.hasStatus = false
         builderResult.status = Int32(0)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> StatusChangeRequest.Builder {
      builderResult = StatusChangeRequest()
      return self
    }
    public override func clone() throws -> StatusChangeRequest.Builder {
      return try StatusChangeRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> StatusChangeRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> StatusChangeRequest {
      let returnMe:StatusChangeRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:StatusChangeRequest) throws -> StatusChangeRequest.Builder {
      if other == StatusChangeRequest() {
       return self
      }
      if other.hasStatus {
           status = other.status
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> StatusChangeRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> StatusChangeRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          status = try input.readInt32()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class ChatMessageOutboundRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var receiver:String = ""

  public private(set) var hasReceiver:Bool = false
  public private(set) var content:NSData = NSData()

  public private(set) var hasContent:Bool = false
  public private(set) var msgKey:String = ""

  public private(set) var hasMsgKey:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasReceiver {
      try output.writeString(1, value:receiver)
    }
    if hasContent {
      try output.writeData(2, value:content)
    }
    if hasMsgKey {
      try output.writeString(3, value:msgKey)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasReceiver {
      serialize_size += receiver.computeStringSize(1)
    }
    if hasContent {
      serialize_size += content.computeDataSize(2)
    }
    if hasMsgKey {
      serialize_size += msgKey.computeStringSize(3)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ChatMessageOutboundRequest> {
    var mergedArray = Array<ChatMessageOutboundRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ChatMessageOutboundRequest? {
    return try ChatMessageOutboundRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> ChatMessageOutboundRequest {
    return try ChatMessageOutboundRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ChatMessageOutboundRequest {
    return try ChatMessageOutboundRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> ChatMessageOutboundRequest {
    return try ChatMessageOutboundRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ChatMessageOutboundRequest {
    return try ChatMessageOutboundRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ChatMessageOutboundRequest {
    return try ChatMessageOutboundRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ChatMessageOutboundRequest {
    return try ChatMessageOutboundRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> ChatMessageOutboundRequest.Builder {
    return ChatMessageOutboundRequest.classBuilder() as! ChatMessageOutboundRequest.Builder
  }
  public func getBuilder() -> ChatMessageOutboundRequest.Builder {
    return classBuilder() as! ChatMessageOutboundRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return ChatMessageOutboundRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return ChatMessageOutboundRequest.Builder()
  }
  public func toBuilder() throws -> ChatMessageOutboundRequest.Builder {
    return try ChatMessageOutboundRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:ChatMessageOutboundRequest) throws -> ChatMessageOutboundRequest.Builder {
    return try ChatMessageOutboundRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasReceiver {
      output += "\(indent) receiver: \(receiver) \n"
    }
    if hasContent {
      output += "\(indent) content: \(content) \n"
    }
    if hasMsgKey {
      output += "\(indent) msgKey: \(msgKey) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasReceiver {
             hashCode = (hashCode &* 31) &+ receiver.hashValue
          }
          if hasContent {
             hashCode = (hashCode &* 31) &+ content.hashValue
          }
          if hasMsgKey {
             hashCode = (hashCode &* 31) &+ msgKey.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "ChatMessageOutboundRequest"
  }
  override public func className() -> String {
      return "ChatMessageOutboundRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return ChatMessageOutboundRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:ChatMessageOutboundRequest = ChatMessageOutboundRequest()
    public func getMessage() -> ChatMessageOutboundRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasReceiver:Bool {
         get {
              return builderResult.hasReceiver
         }
    }
    public var receiver:String {
         get {
              return builderResult.receiver
         }
         set (value) {
             builderResult.hasReceiver = true
             builderResult.receiver = value
         }
    }
    public func setReceiver(value:String) -> ChatMessageOutboundRequest.Builder {
      self.receiver = value
      return self
    }
    public func clearReceiver() -> ChatMessageOutboundRequest.Builder{
         builderResult.hasReceiver = false
         builderResult.receiver = ""
         return self
    }
    public var hasContent:Bool {
         get {
              return builderResult.hasContent
         }
    }
    public var content:NSData {
         get {
              return builderResult.content
         }
         set (value) {
             builderResult.hasContent = true
             builderResult.content = value
         }
    }
    public func setContent(value:NSData) -> ChatMessageOutboundRequest.Builder {
      self.content = value
      return self
    }
    public func clearContent() -> ChatMessageOutboundRequest.Builder{
         builderResult.hasContent = false
         builderResult.content = NSData()
         return self
    }
    public var hasMsgKey:Bool {
         get {
              return builderResult.hasMsgKey
         }
    }
    public var msgKey:String {
         get {
              return builderResult.msgKey
         }
         set (value) {
             builderResult.hasMsgKey = true
             builderResult.msgKey = value
         }
    }
    public func setMsgKey(value:String) -> ChatMessageOutboundRequest.Builder {
      self.msgKey = value
      return self
    }
    public func clearMsgKey() -> ChatMessageOutboundRequest.Builder{
         builderResult.hasMsgKey = false
         builderResult.msgKey = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> ChatMessageOutboundRequest.Builder {
      builderResult = ChatMessageOutboundRequest()
      return self
    }
    public override func clone() throws -> ChatMessageOutboundRequest.Builder {
      return try ChatMessageOutboundRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> ChatMessageOutboundRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> ChatMessageOutboundRequest {
      let returnMe:ChatMessageOutboundRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:ChatMessageOutboundRequest) throws -> ChatMessageOutboundRequest.Builder {
      if other == ChatMessageOutboundRequest() {
       return self
      }
      if other.hasReceiver {
           receiver = other.receiver
      }
      if other.hasContent {
           content = other.content
      }
      if other.hasMsgKey {
           msgKey = other.msgKey
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> ChatMessageOutboundRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ChatMessageOutboundRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          receiver = try input.readString()

        case 18 :
          content = try input.readData()

        case 26 :
          msgKey = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class MessageRemoveRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var msgKey:String = ""

  public private(set) var hasMsgKey:Bool = false
  public private(set) var isTeam:Bool = false

  public private(set) var hasIsTeam:Bool = false
  public private(set) var sender:String = ""

  public private(set) var hasSender:Bool = false
  public private(set) var receiver:String = ""

  public private(set) var hasReceiver:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasMsgKey {
      try output.writeString(1, value:msgKey)
    }
    if hasIsTeam {
      try output.writeBool(2, value:isTeam)
    }
    if hasSender {
      try output.writeString(3, value:sender)
    }
    if hasReceiver {
      try output.writeString(4, value:receiver)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasMsgKey {
      serialize_size += msgKey.computeStringSize(1)
    }
    if hasIsTeam {
      serialize_size += isTeam.computeBoolSize(2)
    }
    if hasSender {
      serialize_size += sender.computeStringSize(3)
    }
    if hasReceiver {
      serialize_size += receiver.computeStringSize(4)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<MessageRemoveRequest> {
    var mergedArray = Array<MessageRemoveRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> MessageRemoveRequest? {
    return try MessageRemoveRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> MessageRemoveRequest {
    return try MessageRemoveRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> MessageRemoveRequest {
    return try MessageRemoveRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> MessageRemoveRequest {
    return try MessageRemoveRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> MessageRemoveRequest {
    return try MessageRemoveRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> MessageRemoveRequest {
    return try MessageRemoveRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MessageRemoveRequest {
    return try MessageRemoveRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> MessageRemoveRequest.Builder {
    return MessageRemoveRequest.classBuilder() as! MessageRemoveRequest.Builder
  }
  public func getBuilder() -> MessageRemoveRequest.Builder {
    return classBuilder() as! MessageRemoveRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return MessageRemoveRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return MessageRemoveRequest.Builder()
  }
  public func toBuilder() throws -> MessageRemoveRequest.Builder {
    return try MessageRemoveRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:MessageRemoveRequest) throws -> MessageRemoveRequest.Builder {
    return try MessageRemoveRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasMsgKey {
      output += "\(indent) msgKey: \(msgKey) \n"
    }
    if hasIsTeam {
      output += "\(indent) isTeam: \(isTeam) \n"
    }
    if hasSender {
      output += "\(indent) sender: \(sender) \n"
    }
    if hasReceiver {
      output += "\(indent) receiver: \(receiver) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasMsgKey {
             hashCode = (hashCode &* 31) &+ msgKey.hashValue
          }
          if hasIsTeam {
             hashCode = (hashCode &* 31) &+ isTeam.hashValue
          }
          if hasSender {
             hashCode = (hashCode &* 31) &+ sender.hashValue
          }
          if hasReceiver {
             hashCode = (hashCode &* 31) &+ receiver.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "MessageRemoveRequest"
  }
  override public func className() -> String {
      return "MessageRemoveRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return MessageRemoveRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:MessageRemoveRequest = MessageRemoveRequest()
    public func getMessage() -> MessageRemoveRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasMsgKey:Bool {
         get {
              return builderResult.hasMsgKey
         }
    }
    public var msgKey:String {
         get {
              return builderResult.msgKey
         }
         set (value) {
             builderResult.hasMsgKey = true
             builderResult.msgKey = value
         }
    }
    public func setMsgKey(value:String) -> MessageRemoveRequest.Builder {
      self.msgKey = value
      return self
    }
    public func clearMsgKey() -> MessageRemoveRequest.Builder{
         builderResult.hasMsgKey = false
         builderResult.msgKey = ""
         return self
    }
    public var hasIsTeam:Bool {
         get {
              return builderResult.hasIsTeam
         }
    }
    public var isTeam:Bool {
         get {
              return builderResult.isTeam
         }
         set (value) {
             builderResult.hasIsTeam = true
             builderResult.isTeam = value
         }
    }
    public func setIsTeam(value:Bool) -> MessageRemoveRequest.Builder {
      self.isTeam = value
      return self
    }
    public func clearIsTeam() -> MessageRemoveRequest.Builder{
         builderResult.hasIsTeam = false
         builderResult.isTeam = false
         return self
    }
    public var hasSender:Bool {
         get {
              return builderResult.hasSender
         }
    }
    public var sender:String {
         get {
              return builderResult.sender
         }
         set (value) {
             builderResult.hasSender = true
             builderResult.sender = value
         }
    }
    public func setSender(value:String) -> MessageRemoveRequest.Builder {
      self.sender = value
      return self
    }
    public func clearSender() -> MessageRemoveRequest.Builder{
         builderResult.hasSender = false
         builderResult.sender = ""
         return self
    }
    public var hasReceiver:Bool {
         get {
              return builderResult.hasReceiver
         }
    }
    public var receiver:String {
         get {
              return builderResult.receiver
         }
         set (value) {
             builderResult.hasReceiver = true
             builderResult.receiver = value
         }
    }
    public func setReceiver(value:String) -> MessageRemoveRequest.Builder {
      self.receiver = value
      return self
    }
    public func clearReceiver() -> MessageRemoveRequest.Builder{
         builderResult.hasReceiver = false
         builderResult.receiver = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> MessageRemoveRequest.Builder {
      builderResult = MessageRemoveRequest()
      return self
    }
    public override func clone() throws -> MessageRemoveRequest.Builder {
      return try MessageRemoveRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> MessageRemoveRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> MessageRemoveRequest {
      let returnMe:MessageRemoveRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:MessageRemoveRequest) throws -> MessageRemoveRequest.Builder {
      if other == MessageRemoveRequest() {
       return self
      }
      if other.hasMsgKey {
           msgKey = other.msgKey
      }
      if other.hasIsTeam {
           isTeam = other.isTeam
      }
      if other.hasSender {
           sender = other.sender
      }
      if other.hasReceiver {
           receiver = other.receiver
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> MessageRemoveRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MessageRemoveRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          msgKey = try input.readString()

        case 16 :
          isTeam = try input.readBool()

        case 26 :
          sender = try input.readString()

        case 34 :
          receiver = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class GroupCreateRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var teamName:String = ""

  public private(set) var hasTeamName:Bool = false
  public private(set) var members:Array<String> = Array<String>()
  public private(set) var avatar:NSData = NSData()

  public private(set) var hasAvatar:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasTeamName {
      try output.writeString(1, value:teamName)
    }
    if !members.isEmpty {
      for oneValuemembers in members {
        try output.writeString(2, value:oneValuemembers)
      }
    }
    if hasAvatar {
      try output.writeData(3, value:avatar)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasTeamName {
      serialize_size += teamName.computeStringSize(1)
    }
    var dataSizeMembers:Int32 = 0
    for oneValuemembers in members {
        dataSizeMembers += oneValuemembers.computeStringSizeNoTag()
    }
    serialize_size += dataSizeMembers
    serialize_size += 1 * Int32(members.count)
    if hasAvatar {
      serialize_size += avatar.computeDataSize(3)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<GroupCreateRequest> {
    var mergedArray = Array<GroupCreateRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> GroupCreateRequest? {
    return try GroupCreateRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> GroupCreateRequest {
    return try GroupCreateRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> GroupCreateRequest {
    return try GroupCreateRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> GroupCreateRequest {
    return try GroupCreateRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupCreateRequest {
    return try GroupCreateRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> GroupCreateRequest {
    return try GroupCreateRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupCreateRequest {
    return try GroupCreateRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> GroupCreateRequest.Builder {
    return GroupCreateRequest.classBuilder() as! GroupCreateRequest.Builder
  }
  public func getBuilder() -> GroupCreateRequest.Builder {
    return classBuilder() as! GroupCreateRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return GroupCreateRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return GroupCreateRequest.Builder()
  }
  public func toBuilder() throws -> GroupCreateRequest.Builder {
    return try GroupCreateRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:GroupCreateRequest) throws -> GroupCreateRequest.Builder {
    return try GroupCreateRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasTeamName {
      output += "\(indent) teamName: \(teamName) \n"
    }
    var membersElementIndex:Int = 0
    for oneValuemembers in members  {
        output += "\(indent) members[\(membersElementIndex)]: \(oneValuemembers)\n"
        membersElementIndex += 1
    }
    if hasAvatar {
      output += "\(indent) avatar: \(avatar) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTeamName {
             hashCode = (hashCode &* 31) &+ teamName.hashValue
          }
          for oneValuemembers in members {
              hashCode = (hashCode &* 31) &+ oneValuemembers.hashValue
          }
          if hasAvatar {
             hashCode = (hashCode &* 31) &+ avatar.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "GroupCreateRequest"
  }
  override public func className() -> String {
      return "GroupCreateRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return GroupCreateRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:GroupCreateRequest = GroupCreateRequest()
    public func getMessage() -> GroupCreateRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasTeamName:Bool {
         get {
              return builderResult.hasTeamName
         }
    }
    public var teamName:String {
         get {
              return builderResult.teamName
         }
         set (value) {
             builderResult.hasTeamName = true
             builderResult.teamName = value
         }
    }
    public func setTeamName(value:String) -> GroupCreateRequest.Builder {
      self.teamName = value
      return self
    }
    public func clearTeamName() -> GroupCreateRequest.Builder{
         builderResult.hasTeamName = false
         builderResult.teamName = ""
         return self
    }
    public var members:Array<String> {
         get {
             return builderResult.members
         }
         set (array) {
             builderResult.members = array
         }
    }
    public func setMembers(value:Array<String>) -> GroupCreateRequest.Builder {
      self.members = value
      return self
    }
    public func clearMembers() -> GroupCreateRequest.Builder {
       builderResult.members.removeAll(keepCapacity: false)
       return self
    }
    public var hasAvatar:Bool {
         get {
              return builderResult.hasAvatar
         }
    }
    public var avatar:NSData {
         get {
              return builderResult.avatar
         }
         set (value) {
             builderResult.hasAvatar = true
             builderResult.avatar = value
         }
    }
    public func setAvatar(value:NSData) -> GroupCreateRequest.Builder {
      self.avatar = value
      return self
    }
    public func clearAvatar() -> GroupCreateRequest.Builder{
         builderResult.hasAvatar = false
         builderResult.avatar = NSData()
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> GroupCreateRequest.Builder {
      builderResult = GroupCreateRequest()
      return self
    }
    public override func clone() throws -> GroupCreateRequest.Builder {
      return try GroupCreateRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> GroupCreateRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> GroupCreateRequest {
      let returnMe:GroupCreateRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:GroupCreateRequest) throws -> GroupCreateRequest.Builder {
      if other == GroupCreateRequest() {
       return self
      }
      if other.hasTeamName {
           teamName = other.teamName
      }
      if !other.members.isEmpty {
          builderResult.members += other.members
      }
      if other.hasAvatar {
           avatar = other.avatar
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> GroupCreateRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupCreateRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          teamName = try input.readString()

        case 18 :
          members += [try input.readString()]

        case 26 :
          avatar = try input.readData()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class GroupRemoveRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var teamKey:String = ""

  public private(set) var hasTeamKey:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasTeamKey {
      try output.writeString(1, value:teamKey)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasTeamKey {
      serialize_size += teamKey.computeStringSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<GroupRemoveRequest> {
    var mergedArray = Array<GroupRemoveRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> GroupRemoveRequest? {
    return try GroupRemoveRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> GroupRemoveRequest {
    return try GroupRemoveRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> GroupRemoveRequest {
    return try GroupRemoveRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> GroupRemoveRequest {
    return try GroupRemoveRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupRemoveRequest {
    return try GroupRemoveRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> GroupRemoveRequest {
    return try GroupRemoveRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupRemoveRequest {
    return try GroupRemoveRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> GroupRemoveRequest.Builder {
    return GroupRemoveRequest.classBuilder() as! GroupRemoveRequest.Builder
  }
  public func getBuilder() -> GroupRemoveRequest.Builder {
    return classBuilder() as! GroupRemoveRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return GroupRemoveRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return GroupRemoveRequest.Builder()
  }
  public func toBuilder() throws -> GroupRemoveRequest.Builder {
    return try GroupRemoveRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:GroupRemoveRequest) throws -> GroupRemoveRequest.Builder {
    return try GroupRemoveRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasTeamKey {
      output += "\(indent) teamKey: \(teamKey) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTeamKey {
             hashCode = (hashCode &* 31) &+ teamKey.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "GroupRemoveRequest"
  }
  override public func className() -> String {
      return "GroupRemoveRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return GroupRemoveRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:GroupRemoveRequest = GroupRemoveRequest()
    public func getMessage() -> GroupRemoveRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasTeamKey:Bool {
         get {
              return builderResult.hasTeamKey
         }
    }
    public var teamKey:String {
         get {
              return builderResult.teamKey
         }
         set (value) {
             builderResult.hasTeamKey = true
             builderResult.teamKey = value
         }
    }
    public func setTeamKey(value:String) -> GroupRemoveRequest.Builder {
      self.teamKey = value
      return self
    }
    public func clearTeamKey() -> GroupRemoveRequest.Builder{
         builderResult.hasTeamKey = false
         builderResult.teamKey = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> GroupRemoveRequest.Builder {
      builderResult = GroupRemoveRequest()
      return self
    }
    public override func clone() throws -> GroupRemoveRequest.Builder {
      return try GroupRemoveRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> GroupRemoveRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> GroupRemoveRequest {
      let returnMe:GroupRemoveRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:GroupRemoveRequest) throws -> GroupRemoveRequest.Builder {
      if other == GroupRemoveRequest() {
       return self
      }
      if other.hasTeamKey {
           teamKey = other.teamKey
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> GroupRemoveRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupRemoveRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          teamKey = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class GroupAddMemberRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var teamKey:String = ""

  public private(set) var hasTeamKey:Bool = false
  public private(set) var member:String = ""

  public private(set) var hasMember:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasTeamKey {
      try output.writeString(1, value:teamKey)
    }
    if hasMember {
      try output.writeString(2, value:member)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasTeamKey {
      serialize_size += teamKey.computeStringSize(1)
    }
    if hasMember {
      serialize_size += member.computeStringSize(2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<GroupAddMemberRequest> {
    var mergedArray = Array<GroupAddMemberRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> GroupAddMemberRequest? {
    return try GroupAddMemberRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> GroupAddMemberRequest {
    return try GroupAddMemberRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> GroupAddMemberRequest {
    return try GroupAddMemberRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> GroupAddMemberRequest {
    return try GroupAddMemberRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupAddMemberRequest {
    return try GroupAddMemberRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> GroupAddMemberRequest {
    return try GroupAddMemberRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupAddMemberRequest {
    return try GroupAddMemberRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> GroupAddMemberRequest.Builder {
    return GroupAddMemberRequest.classBuilder() as! GroupAddMemberRequest.Builder
  }
  public func getBuilder() -> GroupAddMemberRequest.Builder {
    return classBuilder() as! GroupAddMemberRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return GroupAddMemberRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return GroupAddMemberRequest.Builder()
  }
  public func toBuilder() throws -> GroupAddMemberRequest.Builder {
    return try GroupAddMemberRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:GroupAddMemberRequest) throws -> GroupAddMemberRequest.Builder {
    return try GroupAddMemberRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasTeamKey {
      output += "\(indent) teamKey: \(teamKey) \n"
    }
    if hasMember {
      output += "\(indent) member: \(member) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTeamKey {
             hashCode = (hashCode &* 31) &+ teamKey.hashValue
          }
          if hasMember {
             hashCode = (hashCode &* 31) &+ member.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "GroupAddMemberRequest"
  }
  override public func className() -> String {
      return "GroupAddMemberRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return GroupAddMemberRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:GroupAddMemberRequest = GroupAddMemberRequest()
    public func getMessage() -> GroupAddMemberRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasTeamKey:Bool {
         get {
              return builderResult.hasTeamKey
         }
    }
    public var teamKey:String {
         get {
              return builderResult.teamKey
         }
         set (value) {
             builderResult.hasTeamKey = true
             builderResult.teamKey = value
         }
    }
    public func setTeamKey(value:String) -> GroupAddMemberRequest.Builder {
      self.teamKey = value
      return self
    }
    public func clearTeamKey() -> GroupAddMemberRequest.Builder{
         builderResult.hasTeamKey = false
         builderResult.teamKey = ""
         return self
    }
    public var hasMember:Bool {
         get {
              return builderResult.hasMember
         }
    }
    public var member:String {
         get {
              return builderResult.member
         }
         set (value) {
             builderResult.hasMember = true
             builderResult.member = value
         }
    }
    public func setMember(value:String) -> GroupAddMemberRequest.Builder {
      self.member = value
      return self
    }
    public func clearMember() -> GroupAddMemberRequest.Builder{
         builderResult.hasMember = false
         builderResult.member = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> GroupAddMemberRequest.Builder {
      builderResult = GroupAddMemberRequest()
      return self
    }
    public override func clone() throws -> GroupAddMemberRequest.Builder {
      return try GroupAddMemberRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> GroupAddMemberRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> GroupAddMemberRequest {
      let returnMe:GroupAddMemberRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:GroupAddMemberRequest) throws -> GroupAddMemberRequest.Builder {
      if other == GroupAddMemberRequest() {
       return self
      }
      if other.hasTeamKey {
           teamKey = other.teamKey
      }
      if other.hasMember {
           member = other.member
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> GroupAddMemberRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupAddMemberRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          teamKey = try input.readString()

        case 18 :
          member = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class GroupRemoveMemberRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var teamKey:String = ""

  public private(set) var hasTeamKey:Bool = false
  public private(set) var member:String = ""

  public private(set) var hasMember:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasTeamKey {
      try output.writeString(1, value:teamKey)
    }
    if hasMember {
      try output.writeString(2, value:member)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasTeamKey {
      serialize_size += teamKey.computeStringSize(1)
    }
    if hasMember {
      serialize_size += member.computeStringSize(2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<GroupRemoveMemberRequest> {
    var mergedArray = Array<GroupRemoveMemberRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> GroupRemoveMemberRequest? {
    return try GroupRemoveMemberRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> GroupRemoveMemberRequest {
    return try GroupRemoveMemberRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> GroupRemoveMemberRequest {
    return try GroupRemoveMemberRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> GroupRemoveMemberRequest {
    return try GroupRemoveMemberRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupRemoveMemberRequest {
    return try GroupRemoveMemberRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> GroupRemoveMemberRequest {
    return try GroupRemoveMemberRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupRemoveMemberRequest {
    return try GroupRemoveMemberRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> GroupRemoveMemberRequest.Builder {
    return GroupRemoveMemberRequest.classBuilder() as! GroupRemoveMemberRequest.Builder
  }
  public func getBuilder() -> GroupRemoveMemberRequest.Builder {
    return classBuilder() as! GroupRemoveMemberRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return GroupRemoveMemberRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return GroupRemoveMemberRequest.Builder()
  }
  public func toBuilder() throws -> GroupRemoveMemberRequest.Builder {
    return try GroupRemoveMemberRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:GroupRemoveMemberRequest) throws -> GroupRemoveMemberRequest.Builder {
    return try GroupRemoveMemberRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasTeamKey {
      output += "\(indent) teamKey: \(teamKey) \n"
    }
    if hasMember {
      output += "\(indent) member: \(member) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTeamKey {
             hashCode = (hashCode &* 31) &+ teamKey.hashValue
          }
          if hasMember {
             hashCode = (hashCode &* 31) &+ member.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "GroupRemoveMemberRequest"
  }
  override public func className() -> String {
      return "GroupRemoveMemberRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return GroupRemoveMemberRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:GroupRemoveMemberRequest = GroupRemoveMemberRequest()
    public func getMessage() -> GroupRemoveMemberRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasTeamKey:Bool {
         get {
              return builderResult.hasTeamKey
         }
    }
    public var teamKey:String {
         get {
              return builderResult.teamKey
         }
         set (value) {
             builderResult.hasTeamKey = true
             builderResult.teamKey = value
         }
    }
    public func setTeamKey(value:String) -> GroupRemoveMemberRequest.Builder {
      self.teamKey = value
      return self
    }
    public func clearTeamKey() -> GroupRemoveMemberRequest.Builder{
         builderResult.hasTeamKey = false
         builderResult.teamKey = ""
         return self
    }
    public var hasMember:Bool {
         get {
              return builderResult.hasMember
         }
    }
    public var member:String {
         get {
              return builderResult.member
         }
         set (value) {
             builderResult.hasMember = true
             builderResult.member = value
         }
    }
    public func setMember(value:String) -> GroupRemoveMemberRequest.Builder {
      self.member = value
      return self
    }
    public func clearMember() -> GroupRemoveMemberRequest.Builder{
         builderResult.hasMember = false
         builderResult.member = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> GroupRemoveMemberRequest.Builder {
      builderResult = GroupRemoveMemberRequest()
      return self
    }
    public override func clone() throws -> GroupRemoveMemberRequest.Builder {
      return try GroupRemoveMemberRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> GroupRemoveMemberRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> GroupRemoveMemberRequest {
      let returnMe:GroupRemoveMemberRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:GroupRemoveMemberRequest) throws -> GroupRemoveMemberRequest.Builder {
      if other == GroupRemoveMemberRequest() {
       return self
      }
      if other.hasTeamKey {
           teamKey = other.teamKey
      }
      if other.hasMember {
           member = other.member
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> GroupRemoveMemberRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupRemoveMemberRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          teamKey = try input.readString()

        case 18 :
          member = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class GroupMessageOutboundRequest : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var teamKey:String = ""

  public private(set) var hasTeamKey:Bool = false
  public private(set) var content:NSData = NSData()

  public private(set) var hasContent:Bool = false
  public private(set) var msgKey:String = ""

  public private(set) var hasMsgKey:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasTeamKey {
      try output.writeString(1, value:teamKey)
    }
    if hasContent {
      try output.writeData(2, value:content)
    }
    if hasMsgKey {
      try output.writeString(3, value:msgKey)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasTeamKey {
      serialize_size += teamKey.computeStringSize(1)
    }
    if hasContent {
      serialize_size += content.computeDataSize(2)
    }
    if hasMsgKey {
      serialize_size += msgKey.computeStringSize(3)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<GroupMessageOutboundRequest> {
    var mergedArray = Array<GroupMessageOutboundRequest>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> GroupMessageOutboundRequest? {
    return try GroupMessageOutboundRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> GroupMessageOutboundRequest {
    return try GroupMessageOutboundRequest.Builder().mergeFromData(data, extensionRegistry:RequestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> GroupMessageOutboundRequest {
    return try GroupMessageOutboundRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> GroupMessageOutboundRequest {
    return try GroupMessageOutboundRequest.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupMessageOutboundRequest {
    return try GroupMessageOutboundRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> GroupMessageOutboundRequest {
    return try GroupMessageOutboundRequest.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupMessageOutboundRequest {
    return try GroupMessageOutboundRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> GroupMessageOutboundRequest.Builder {
    return GroupMessageOutboundRequest.classBuilder() as! GroupMessageOutboundRequest.Builder
  }
  public func getBuilder() -> GroupMessageOutboundRequest.Builder {
    return classBuilder() as! GroupMessageOutboundRequest.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return GroupMessageOutboundRequest.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return GroupMessageOutboundRequest.Builder()
  }
  public func toBuilder() throws -> GroupMessageOutboundRequest.Builder {
    return try GroupMessageOutboundRequest.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:GroupMessageOutboundRequest) throws -> GroupMessageOutboundRequest.Builder {
    return try GroupMessageOutboundRequest.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasTeamKey {
      output += "\(indent) teamKey: \(teamKey) \n"
    }
    if hasContent {
      output += "\(indent) content: \(content) \n"
    }
    if hasMsgKey {
      output += "\(indent) msgKey: \(msgKey) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTeamKey {
             hashCode = (hashCode &* 31) &+ teamKey.hashValue
          }
          if hasContent {
             hashCode = (hashCode &* 31) &+ content.hashValue
          }
          if hasMsgKey {
             hashCode = (hashCode &* 31) &+ msgKey.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "GroupMessageOutboundRequest"
  }
  override public func className() -> String {
      return "GroupMessageOutboundRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return GroupMessageOutboundRequest.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:GroupMessageOutboundRequest = GroupMessageOutboundRequest()
    public func getMessage() -> GroupMessageOutboundRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasTeamKey:Bool {
         get {
              return builderResult.hasTeamKey
         }
    }
    public var teamKey:String {
         get {
              return builderResult.teamKey
         }
         set (value) {
             builderResult.hasTeamKey = true
             builderResult.teamKey = value
         }
    }
    public func setTeamKey(value:String) -> GroupMessageOutboundRequest.Builder {
      self.teamKey = value
      return self
    }
    public func clearTeamKey() -> GroupMessageOutboundRequest.Builder{
         builderResult.hasTeamKey = false
         builderResult.teamKey = ""
         return self
    }
    public var hasContent:Bool {
         get {
              return builderResult.hasContent
         }
    }
    public var content:NSData {
         get {
              return builderResult.content
         }
         set (value) {
             builderResult.hasContent = true
             builderResult.content = value
         }
    }
    public func setContent(value:NSData) -> GroupMessageOutboundRequest.Builder {
      self.content = value
      return self
    }
    public func clearContent() -> GroupMessageOutboundRequest.Builder{
         builderResult.hasContent = false
         builderResult.content = NSData()
         return self
    }
    public var hasMsgKey:Bool {
         get {
              return builderResult.hasMsgKey
         }
    }
    public var msgKey:String {
         get {
              return builderResult.msgKey
         }
         set (value) {
             builderResult.hasMsgKey = true
             builderResult.msgKey = value
         }
    }
    public func setMsgKey(value:String) -> GroupMessageOutboundRequest.Builder {
      self.msgKey = value
      return self
    }
    public func clearMsgKey() -> GroupMessageOutboundRequest.Builder{
         builderResult.hasMsgKey = false
         builderResult.msgKey = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> GroupMessageOutboundRequest.Builder {
      builderResult = GroupMessageOutboundRequest()
      return self
    }
    public override func clone() throws -> GroupMessageOutboundRequest.Builder {
      return try GroupMessageOutboundRequest.builderWithPrototype(builderResult)
    }
    public override func build() throws -> GroupMessageOutboundRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> GroupMessageOutboundRequest {
      let returnMe:GroupMessageOutboundRequest = builderResult
      return returnMe
    }
    public func mergeFrom(other:GroupMessageOutboundRequest) throws -> GroupMessageOutboundRequest.Builder {
      if other == GroupMessageOutboundRequest() {
       return self
      }
      if other.hasTeamKey {
           teamKey = other.teamKey
      }
      if other.hasContent {
           content = other.content
      }
      if other.hasMsgKey {
           msgKey = other.msgKey
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> GroupMessageOutboundRequest.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupMessageOutboundRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          teamKey = try input.readString()

        case 18 :
          content = try input.readData()

        case 26 :
          msgKey = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}


// @@protoc_insertion_point(global_scope)

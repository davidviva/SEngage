// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file Entity.proto

import Foundation
import ProtocolBuffers


public func == (lhs: User, rhs: User) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
  fieldCheck = fieldCheck && (lhs.hasDisplayname == rhs.hasDisplayname) && (!lhs.hasDisplayname || lhs.displayname == rhs.displayname)
  fieldCheck = fieldCheck && (lhs.hasExtension == rhs.hasExtension) && (!lhs.hasExtension || lhs.extension_ == rhs.extension_)
  fieldCheck = fieldCheck && (lhs.hasAacParticipantPin == rhs.hasAacParticipantPin) && (!lhs.hasAacParticipantPin || lhs.aacParticipantPin == rhs.aacParticipantPin)
  fieldCheck = fieldCheck && (lhs.hasAacModeratorPin == rhs.hasAacModeratorPin) && (!lhs.hasAacModeratorPin || lhs.aacModeratorPin == rhs.aacModeratorPin)
  fieldCheck = fieldCheck && (lhs.hasAvatarVer == rhs.hasAvatarVer) && (!lhs.hasAvatarVer || lhs.avatarVer == rhs.avatarVer)
  fieldCheck = fieldCheck && (lhs.hasContactVer == rhs.hasContactVer) && (!lhs.hasContactVer || lhs.contactVer == rhs.contactVer)
  fieldCheck = fieldCheck && (lhs.hasTeamVer == rhs.hasTeamVer) && (!lhs.hasTeamVer || lhs.teamVer == rhs.teamVer)
  fieldCheck = fieldCheck && (lhs.hasOnlineStatus == rhs.hasOnlineStatus) && (!lhs.hasOnlineStatus || lhs.onlineStatus == rhs.onlineStatus)
  fieldCheck = fieldCheck && (lhs.hasCellPhone == rhs.hasCellPhone) && (!lhs.hasCellPhone || lhs.cellPhone == rhs.cellPhone)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Session, rhs: Session) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSessionId == rhs.hasSessionId) && (!lhs.hasSessionId || lhs.sessionId == rhs.sessionId)
  fieldCheck = fieldCheck && (lhs.hasIp == rhs.hasIp) && (!lhs.hasIp || lhs.ip == rhs.ip)
  fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
  fieldCheck = fieldCheck && (lhs.hasActiveAt == rhs.hasActiveAt) && (!lhs.hasActiveAt || lhs.activeAt == rhs.activeAt)
  fieldCheck = fieldCheck && (lhs.hasExpireAt == rhs.hasExpireAt) && (!lhs.hasExpireAt || lhs.expireAt == rhs.expireAt)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Team, rhs: Team) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTeamKey == rhs.hasTeamKey) && (!lhs.hasTeamKey || lhs.teamKey == rhs.teamKey)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasAvatarVer == rhs.hasAvatarVer) && (!lhs.hasAvatarVer || lhs.avatarVer == rhs.avatarVer)
  fieldCheck = fieldCheck && (lhs.hasTeamVer == rhs.hasTeamVer) && (!lhs.hasTeamVer || lhs.teamVer == rhs.teamVer)
  fieldCheck = fieldCheck && (lhs.hasCreator == rhs.hasCreator) && (!lhs.hasCreator || lhs.creator == rhs.creator)
  fieldCheck = fieldCheck && (lhs.members == rhs.members)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: SimpleTeam, rhs: SimpleTeam) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTeamKey == rhs.hasTeamKey) && (!lhs.hasTeamKey || lhs.teamKey == rhs.teamKey)
  fieldCheck = fieldCheck && (lhs.hasAvatarVer == rhs.hasAvatarVer) && (!lhs.hasAvatarVer || lhs.avatarVer == rhs.avatarVer)
  fieldCheck = fieldCheck && (lhs.hasTeamVer == rhs.hasTeamVer) && (!lhs.hasTeamVer || lhs.teamVer == rhs.teamVer)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: App, rhs: App) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public struct EntityRoot {
  public static var sharedInstance : EntityRoot {
   struct Static {
       static let instance : EntityRoot = EntityRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final public class User : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var username:String = ""

  public private(set) var hasUsername:Bool = false
  public private(set) var email:String = ""

  public private(set) var hasEmail:Bool = false
  public private(set) var displayname:String = ""

  public private(set) var hasDisplayname:Bool = false
  public private(set) var extension_:String = ""

  public private(set) var hasExtension:Bool = false
  public private(set) var aacParticipantPin:String = ""

  public private(set) var hasAacParticipantPin:Bool = false
  public private(set) var aacModeratorPin:String = ""

  public private(set) var hasAacModeratorPin:Bool = false
  public private(set) var avatarVer:Int32 = Int32(0)

  public private(set) var hasAvatarVer:Bool = false
  public private(set) var contactVer:Int32 = Int32(0)

  public private(set) var hasContactVer:Bool = false
  public private(set) var teamVer:Int32 = Int32(0)

  public private(set) var hasTeamVer:Bool = false
  public private(set) var onlineStatus:Int32 = Int32(0)

  public private(set) var hasOnlineStatus:Bool = false
  public private(set) var cellPhone:String = ""

  public private(set) var hasCellPhone:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasUsername {
      try output.writeString(1, value:username)
    }
    if hasEmail {
      try output.writeString(2, value:email)
    }
    if hasDisplayname {
      try output.writeString(3, value:displayname)
    }
    if hasExtension {
      try output.writeString(4, value:extension_)
    }
    if hasAacParticipantPin {
      try output.writeString(5, value:aacParticipantPin)
    }
    if hasAacModeratorPin {
      try output.writeString(6, value:aacModeratorPin)
    }
    if hasAvatarVer {
      try output.writeInt32(7, value:avatarVer)
    }
    if hasContactVer {
      try output.writeInt32(8, value:contactVer)
    }
    if hasTeamVer {
      try output.writeInt32(9, value:teamVer)
    }
    if hasOnlineStatus {
      try output.writeInt32(10, value:onlineStatus)
    }
    if hasCellPhone {
      try output.writeString(11, value:cellPhone)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasUsername {
      serialize_size += username.computeStringSize(1)
    }
    if hasEmail {
      serialize_size += email.computeStringSize(2)
    }
    if hasDisplayname {
      serialize_size += displayname.computeStringSize(3)
    }
    if hasExtension {
      serialize_size += extension_.computeStringSize(4)
    }
    if hasAacParticipantPin {
      serialize_size += aacParticipantPin.computeStringSize(5)
    }
    if hasAacModeratorPin {
      serialize_size += aacModeratorPin.computeStringSize(6)
    }
    if hasAvatarVer {
      serialize_size += avatarVer.computeInt32Size(7)
    }
    if hasContactVer {
      serialize_size += contactVer.computeInt32Size(8)
    }
    if hasTeamVer {
      serialize_size += teamVer.computeInt32Size(9)
    }
    if hasOnlineStatus {
      serialize_size += onlineStatus.computeInt32Size(10)
    }
    if hasCellPhone {
      serialize_size += cellPhone.computeStringSize(11)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<User> {
    var mergedArray = Array<User>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> User? {
    return try User.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> User {
    return try User.Builder().mergeFromData(data, extensionRegistry:EntityRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> User {
    return try User.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> User {
    return try User.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> User {
    return try User.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> User {
    return try User.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> User {
    return try User.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> User.Builder {
    return User.classBuilder() as! User.Builder
  }
  public func getBuilder() -> User.Builder {
    return classBuilder() as! User.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return User.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return User.Builder()
  }
  public func toBuilder() throws -> User.Builder {
    return try User.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:User) throws -> User.Builder {
    return try User.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasUsername {
      output += "\(indent) username: \(username) \n"
    }
    if hasEmail {
      output += "\(indent) email: \(email) \n"
    }
    if hasDisplayname {
      output += "\(indent) displayname: \(displayname) \n"
    }
    if hasExtension {
      output += "\(indent) extension_: \(extension_) \n"
    }
    if hasAacParticipantPin {
      output += "\(indent) aacParticipantPin: \(aacParticipantPin) \n"
    }
    if hasAacModeratorPin {
      output += "\(indent) aacModeratorPin: \(aacModeratorPin) \n"
    }
    if hasAvatarVer {
      output += "\(indent) avatarVer: \(avatarVer) \n"
    }
    if hasContactVer {
      output += "\(indent) contactVer: \(contactVer) \n"
    }
    if hasTeamVer {
      output += "\(indent) teamVer: \(teamVer) \n"
    }
    if hasOnlineStatus {
      output += "\(indent) onlineStatus: \(onlineStatus) \n"
    }
    if hasCellPhone {
      output += "\(indent) cellPhone: \(cellPhone) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUsername {
             hashCode = (hashCode &* 31) &+ username.hashValue
          }
          if hasEmail {
             hashCode = (hashCode &* 31) &+ email.hashValue
          }
          if hasDisplayname {
             hashCode = (hashCode &* 31) &+ displayname.hashValue
          }
          if hasExtension {
             hashCode = (hashCode &* 31) &+ extension_.hashValue
          }
          if hasAacParticipantPin {
             hashCode = (hashCode &* 31) &+ aacParticipantPin.hashValue
          }
          if hasAacModeratorPin {
             hashCode = (hashCode &* 31) &+ aacModeratorPin.hashValue
          }
          if hasAvatarVer {
             hashCode = (hashCode &* 31) &+ avatarVer.hashValue
          }
          if hasContactVer {
             hashCode = (hashCode &* 31) &+ contactVer.hashValue
          }
          if hasTeamVer {
             hashCode = (hashCode &* 31) &+ teamVer.hashValue
          }
          if hasOnlineStatus {
             hashCode = (hashCode &* 31) &+ onlineStatus.hashValue
          }
          if hasCellPhone {
             hashCode = (hashCode &* 31) &+ cellPhone.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "User"
  }
  override public func className() -> String {
      return "User"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return User.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:User = User()
    public func getMessage() -> User {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasUsername:Bool {
         get {
              return builderResult.hasUsername
         }
    }
    public var username:String {
         get {
              return builderResult.username
         }
         set (value) {
             builderResult.hasUsername = true
             builderResult.username = value
         }
    }
    public func setUsername(value:String) -> User.Builder {
      self.username = value
      return self
    }
    public func clearUsername() -> User.Builder{
         builderResult.hasUsername = false
         builderResult.username = ""
         return self
    }
    public var hasEmail:Bool {
         get {
              return builderResult.hasEmail
         }
    }
    public var email:String {
         get {
              return builderResult.email
         }
         set (value) {
             builderResult.hasEmail = true
             builderResult.email = value
         }
    }
    public func setEmail(value:String) -> User.Builder {
      self.email = value
      return self
    }
    public func clearEmail() -> User.Builder{
         builderResult.hasEmail = false
         builderResult.email = ""
         return self
    }
    public var hasDisplayname:Bool {
         get {
              return builderResult.hasDisplayname
         }
    }
    public var displayname:String {
         get {
              return builderResult.displayname
         }
         set (value) {
             builderResult.hasDisplayname = true
             builderResult.displayname = value
         }
    }
    public func setDisplayname(value:String) -> User.Builder {
      self.displayname = value
      return self
    }
    public func clearDisplayname() -> User.Builder{
         builderResult.hasDisplayname = false
         builderResult.displayname = ""
         return self
    }
    public var hasExtension:Bool {
         get {
              return builderResult.hasExtension
         }
    }
    public var extension_:String {
         get {
              return builderResult.extension_
         }
         set (value) {
             builderResult.hasExtension = true
             builderResult.extension_ = value
         }
    }
    public func setExtension(value:String) -> User.Builder {
      self.extension_ = value
      return self
    }
    public func clearExtension() -> User.Builder{
         builderResult.hasExtension = false
         builderResult.extension_ = ""
         return self
    }
    public var hasAacParticipantPin:Bool {
         get {
              return builderResult.hasAacParticipantPin
         }
    }
    public var aacParticipantPin:String {
         get {
              return builderResult.aacParticipantPin
         }
         set (value) {
             builderResult.hasAacParticipantPin = true
             builderResult.aacParticipantPin = value
         }
    }
    public func setAacParticipantPin(value:String) -> User.Builder {
      self.aacParticipantPin = value
      return self
    }
    public func clearAacParticipantPin() -> User.Builder{
         builderResult.hasAacParticipantPin = false
         builderResult.aacParticipantPin = ""
         return self
    }
    public var hasAacModeratorPin:Bool {
         get {
              return builderResult.hasAacModeratorPin
         }
    }
    public var aacModeratorPin:String {
         get {
              return builderResult.aacModeratorPin
         }
         set (value) {
             builderResult.hasAacModeratorPin = true
             builderResult.aacModeratorPin = value
         }
    }
    public func setAacModeratorPin(value:String) -> User.Builder {
      self.aacModeratorPin = value
      return self
    }
    public func clearAacModeratorPin() -> User.Builder{
         builderResult.hasAacModeratorPin = false
         builderResult.aacModeratorPin = ""
         return self
    }
    public var hasAvatarVer:Bool {
         get {
              return builderResult.hasAvatarVer
         }
    }
    public var avatarVer:Int32 {
         get {
              return builderResult.avatarVer
         }
         set (value) {
             builderResult.hasAvatarVer = true
             builderResult.avatarVer = value
         }
    }
    public func setAvatarVer(value:Int32) -> User.Builder {
      self.avatarVer = value
      return self
    }
    public func clearAvatarVer() -> User.Builder{
         builderResult.hasAvatarVer = false
         builderResult.avatarVer = Int32(0)
         return self
    }
    public var hasContactVer:Bool {
         get {
              return builderResult.hasContactVer
         }
    }
    public var contactVer:Int32 {
         get {
              return builderResult.contactVer
         }
         set (value) {
             builderResult.hasContactVer = true
             builderResult.contactVer = value
         }
    }
    public func setContactVer(value:Int32) -> User.Builder {
      self.contactVer = value
      return self
    }
    public func clearContactVer() -> User.Builder{
         builderResult.hasContactVer = false
         builderResult.contactVer = Int32(0)
         return self
    }
    public var hasTeamVer:Bool {
         get {
              return builderResult.hasTeamVer
         }
    }
    public var teamVer:Int32 {
         get {
              return builderResult.teamVer
         }
         set (value) {
             builderResult.hasTeamVer = true
             builderResult.teamVer = value
         }
    }
    public func setTeamVer(value:Int32) -> User.Builder {
      self.teamVer = value
      return self
    }
    public func clearTeamVer() -> User.Builder{
         builderResult.hasTeamVer = false
         builderResult.teamVer = Int32(0)
         return self
    }
    public var hasOnlineStatus:Bool {
         get {
              return builderResult.hasOnlineStatus
         }
    }
    public var onlineStatus:Int32 {
         get {
              return builderResult.onlineStatus
         }
         set (value) {
             builderResult.hasOnlineStatus = true
             builderResult.onlineStatus = value
         }
    }
    public func setOnlineStatus(value:Int32) -> User.Builder {
      self.onlineStatus = value
      return self
    }
    public func clearOnlineStatus() -> User.Builder{
         builderResult.hasOnlineStatus = false
         builderResult.onlineStatus = Int32(0)
         return self
    }
    public var hasCellPhone:Bool {
         get {
              return builderResult.hasCellPhone
         }
    }
    public var cellPhone:String {
         get {
              return builderResult.cellPhone
         }
         set (value) {
             builderResult.hasCellPhone = true
             builderResult.cellPhone = value
         }
    }
    public func setCellPhone(value:String) -> User.Builder {
      self.cellPhone = value
      return self
    }
    public func clearCellPhone() -> User.Builder{
         builderResult.hasCellPhone = false
         builderResult.cellPhone = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> User.Builder {
      builderResult = User()
      return self
    }
    public override func clone() throws -> User.Builder {
      return try User.builderWithPrototype(builderResult)
    }
    public override func build() throws -> User {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> User {
      let returnMe:User = builderResult
      return returnMe
    }
    public func mergeFrom(other:User) throws -> User.Builder {
      if other == User() {
       return self
      }
      if other.hasUsername {
           username = other.username
      }
      if other.hasEmail {
           email = other.email
      }
      if other.hasDisplayname {
           displayname = other.displayname
      }
      if other.hasExtension {
           extension_ = other.extension_
      }
      if other.hasAacParticipantPin {
           aacParticipantPin = other.aacParticipantPin
      }
      if other.hasAacModeratorPin {
           aacModeratorPin = other.aacModeratorPin
      }
      if other.hasAvatarVer {
           avatarVer = other.avatarVer
      }
      if other.hasContactVer {
           contactVer = other.contactVer
      }
      if other.hasTeamVer {
           teamVer = other.teamVer
      }
      if other.hasOnlineStatus {
           onlineStatus = other.onlineStatus
      }
      if other.hasCellPhone {
           cellPhone = other.cellPhone
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> User.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> User.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          username = try input.readString()

        case 18 :
          email = try input.readString()

        case 26 :
          displayname = try input.readString()

        case 34 :
          extension_ = try input.readString()

        case 42 :
          aacParticipantPin = try input.readString()

        case 50 :
          aacModeratorPin = try input.readString()

        case 56 :
          avatarVer = try input.readInt32()

        case 64 :
          contactVer = try input.readInt32()

        case 72 :
          teamVer = try input.readInt32()

        case 80 :
          onlineStatus = try input.readInt32()

        case 90 :
          cellPhone = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class Session : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var sessionId:String = ""

  public private(set) var hasSessionId:Bool = false
  public private(set) var ip:String = ""

  public private(set) var hasIp:Bool = false
  public private(set) var token:String = ""

  public private(set) var hasToken:Bool = false
  public private(set) var activeAt:Int64 = Int64(0)

  public private(set) var hasActiveAt:Bool = false
  public private(set) var expireAt:Int64 = Int64(0)

  public private(set) var hasExpireAt:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasSessionId {
      try output.writeString(1, value:sessionId)
    }
    if hasIp {
      try output.writeString(2, value:ip)
    }
    if hasToken {
      try output.writeString(3, value:token)
    }
    if hasActiveAt {
      try output.writeInt64(4, value:activeAt)
    }
    if hasExpireAt {
      try output.writeInt64(5, value:expireAt)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasSessionId {
      serialize_size += sessionId.computeStringSize(1)
    }
    if hasIp {
      serialize_size += ip.computeStringSize(2)
    }
    if hasToken {
      serialize_size += token.computeStringSize(3)
    }
    if hasActiveAt {
      serialize_size += activeAt.computeInt64Size(4)
    }
    if hasExpireAt {
      serialize_size += expireAt.computeInt64Size(5)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Session> {
    var mergedArray = Array<Session>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Session? {
    return try Session.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> Session {
    return try Session.Builder().mergeFromData(data, extensionRegistry:EntityRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Session {
    return try Session.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> Session {
    return try Session.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Session {
    return try Session.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Session {
    return try Session.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Session {
    return try Session.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> Session.Builder {
    return Session.classBuilder() as! Session.Builder
  }
  public func getBuilder() -> Session.Builder {
    return classBuilder() as! Session.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return Session.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return Session.Builder()
  }
  public func toBuilder() throws -> Session.Builder {
    return try Session.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:Session) throws -> Session.Builder {
    return try Session.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasSessionId {
      output += "\(indent) sessionId: \(sessionId) \n"
    }
    if hasIp {
      output += "\(indent) ip: \(ip) \n"
    }
    if hasToken {
      output += "\(indent) token: \(token) \n"
    }
    if hasActiveAt {
      output += "\(indent) activeAt: \(activeAt) \n"
    }
    if hasExpireAt {
      output += "\(indent) expireAt: \(expireAt) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasSessionId {
             hashCode = (hashCode &* 31) &+ sessionId.hashValue
          }
          if hasIp {
             hashCode = (hashCode &* 31) &+ ip.hashValue
          }
          if hasToken {
             hashCode = (hashCode &* 31) &+ token.hashValue
          }
          if hasActiveAt {
             hashCode = (hashCode &* 31) &+ activeAt.hashValue
          }
          if hasExpireAt {
             hashCode = (hashCode &* 31) &+ expireAt.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "Session"
  }
  override public func className() -> String {
      return "Session"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return Session.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:Session = Session()
    public func getMessage() -> Session {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasSessionId:Bool {
         get {
              return builderResult.hasSessionId
         }
    }
    public var sessionId:String {
         get {
              return builderResult.sessionId
         }
         set (value) {
             builderResult.hasSessionId = true
             builderResult.sessionId = value
         }
    }
    public func setSessionId(value:String) -> Session.Builder {
      self.sessionId = value
      return self
    }
    public func clearSessionId() -> Session.Builder{
         builderResult.hasSessionId = false
         builderResult.sessionId = ""
         return self
    }
    public var hasIp:Bool {
         get {
              return builderResult.hasIp
         }
    }
    public var ip:String {
         get {
              return builderResult.ip
         }
         set (value) {
             builderResult.hasIp = true
             builderResult.ip = value
         }
    }
    public func setIp(value:String) -> Session.Builder {
      self.ip = value
      return self
    }
    public func clearIp() -> Session.Builder{
         builderResult.hasIp = false
         builderResult.ip = ""
         return self
    }
    public var hasToken:Bool {
         get {
              return builderResult.hasToken
         }
    }
    public var token:String {
         get {
              return builderResult.token
         }
         set (value) {
             builderResult.hasToken = true
             builderResult.token = value
         }
    }
    public func setToken(value:String) -> Session.Builder {
      self.token = value
      return self
    }
    public func clearToken() -> Session.Builder{
         builderResult.hasToken = false
         builderResult.token = ""
         return self
    }
    public var hasActiveAt:Bool {
         get {
              return builderResult.hasActiveAt
         }
    }
    public var activeAt:Int64 {
         get {
              return builderResult.activeAt
         }
         set (value) {
             builderResult.hasActiveAt = true
             builderResult.activeAt = value
         }
    }
    public func setActiveAt(value:Int64) -> Session.Builder {
      self.activeAt = value
      return self
    }
    public func clearActiveAt() -> Session.Builder{
         builderResult.hasActiveAt = false
         builderResult.activeAt = Int64(0)
         return self
    }
    public var hasExpireAt:Bool {
         get {
              return builderResult.hasExpireAt
         }
    }
    public var expireAt:Int64 {
         get {
              return builderResult.expireAt
         }
         set (value) {
             builderResult.hasExpireAt = true
             builderResult.expireAt = value
         }
    }
    public func setExpireAt(value:Int64) -> Session.Builder {
      self.expireAt = value
      return self
    }
    public func clearExpireAt() -> Session.Builder{
         builderResult.hasExpireAt = false
         builderResult.expireAt = Int64(0)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Session.Builder {
      builderResult = Session()
      return self
    }
    public override func clone() throws -> Session.Builder {
      return try Session.builderWithPrototype(builderResult)
    }
    public override func build() throws -> Session {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Session {
      let returnMe:Session = builderResult
      return returnMe
    }
    public func mergeFrom(other:Session) throws -> Session.Builder {
      if other == Session() {
       return self
      }
      if other.hasSessionId {
           sessionId = other.sessionId
      }
      if other.hasIp {
           ip = other.ip
      }
      if other.hasToken {
           token = other.token
      }
      if other.hasActiveAt {
           activeAt = other.activeAt
      }
      if other.hasExpireAt {
           expireAt = other.expireAt
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Session.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Session.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          sessionId = try input.readString()

        case 18 :
          ip = try input.readString()

        case 26 :
          token = try input.readString()

        case 32 :
          activeAt = try input.readInt64()

        case 40 :
          expireAt = try input.readInt64()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class Team : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var teamKey:String = ""

  public private(set) var hasTeamKey:Bool = false
  public private(set) var name:String = ""

  public private(set) var hasName:Bool = false
  public private(set) var avatarVer:Int32 = Int32(0)

  public private(set) var hasAvatarVer:Bool = false
  public private(set) var teamVer:Int32 = Int32(0)

  public private(set) var hasTeamVer:Bool = false
  public private(set) var creator:String = ""

  public private(set) var hasCreator:Bool = false
  public private(set) var members:Array<User>  = Array<User>()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasTeamKey {
      try output.writeString(1, value:teamKey)
    }
    if hasName {
      try output.writeString(2, value:name)
    }
    if hasAvatarVer {
      try output.writeInt32(3, value:avatarVer)
    }
    if hasTeamVer {
      try output.writeInt32(4, value:teamVer)
    }
    if hasCreator {
      try output.writeString(5, value:creator)
    }
    for oneElementmembers in members {
        try output.writeMessage(6, value:oneElementmembers)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasTeamKey {
      serialize_size += teamKey.computeStringSize(1)
    }
    if hasName {
      serialize_size += name.computeStringSize(2)
    }
    if hasAvatarVer {
      serialize_size += avatarVer.computeInt32Size(3)
    }
    if hasTeamVer {
      serialize_size += teamVer.computeInt32Size(4)
    }
    if hasCreator {
      serialize_size += creator.computeStringSize(5)
    }
    for oneElementmembers in members {
        serialize_size += oneElementmembers.computeMessageSize(6)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Team> {
    var mergedArray = Array<Team>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Team? {
    return try Team.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> Team {
    return try Team.Builder().mergeFromData(data, extensionRegistry:EntityRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Team {
    return try Team.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> Team {
    return try Team.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Team {
    return try Team.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Team {
    return try Team.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Team {
    return try Team.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> Team.Builder {
    return Team.classBuilder() as! Team.Builder
  }
  public func getBuilder() -> Team.Builder {
    return classBuilder() as! Team.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return Team.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return Team.Builder()
  }
  public func toBuilder() throws -> Team.Builder {
    return try Team.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:Team) throws -> Team.Builder {
    return try Team.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasTeamKey {
      output += "\(indent) teamKey: \(teamKey) \n"
    }
    if hasName {
      output += "\(indent) name: \(name) \n"
    }
    if hasAvatarVer {
      output += "\(indent) avatarVer: \(avatarVer) \n"
    }
    if hasTeamVer {
      output += "\(indent) teamVer: \(teamVer) \n"
    }
    if hasCreator {
      output += "\(indent) creator: \(creator) \n"
    }
    var membersElementIndex:Int = 0
    for oneElementmembers in members {
        output += "\(indent) members[\(membersElementIndex)] {\n"
        output += try oneElementmembers.getDescription("\(indent)  ")
        output += "\(indent)}\n"
        membersElementIndex += 1
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTeamKey {
             hashCode = (hashCode &* 31) &+ teamKey.hashValue
          }
          if hasName {
             hashCode = (hashCode &* 31) &+ name.hashValue
          }
          if hasAvatarVer {
             hashCode = (hashCode &* 31) &+ avatarVer.hashValue
          }
          if hasTeamVer {
             hashCode = (hashCode &* 31) &+ teamVer.hashValue
          }
          if hasCreator {
             hashCode = (hashCode &* 31) &+ creator.hashValue
          }
          for oneElementmembers in members {
              hashCode = (hashCode &* 31) &+ oneElementmembers.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "Team"
  }
  override public func className() -> String {
      return "Team"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return Team.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:Team = Team()
    public func getMessage() -> Team {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasTeamKey:Bool {
         get {
              return builderResult.hasTeamKey
         }
    }
    public var teamKey:String {
         get {
              return builderResult.teamKey
         }
         set (value) {
             builderResult.hasTeamKey = true
             builderResult.teamKey = value
         }
    }
    public func setTeamKey(value:String) -> Team.Builder {
      self.teamKey = value
      return self
    }
    public func clearTeamKey() -> Team.Builder{
         builderResult.hasTeamKey = false
         builderResult.teamKey = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String) -> Team.Builder {
      self.name = value
      return self
    }
    public func clearName() -> Team.Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasAvatarVer:Bool {
         get {
              return builderResult.hasAvatarVer
         }
    }
    public var avatarVer:Int32 {
         get {
              return builderResult.avatarVer
         }
         set (value) {
             builderResult.hasAvatarVer = true
             builderResult.avatarVer = value
         }
    }
    public func setAvatarVer(value:Int32) -> Team.Builder {
      self.avatarVer = value
      return self
    }
    public func clearAvatarVer() -> Team.Builder{
         builderResult.hasAvatarVer = false
         builderResult.avatarVer = Int32(0)
         return self
    }
    public var hasTeamVer:Bool {
         get {
              return builderResult.hasTeamVer
         }
    }
    public var teamVer:Int32 {
         get {
              return builderResult.teamVer
         }
         set (value) {
             builderResult.hasTeamVer = true
             builderResult.teamVer = value
         }
    }
    public func setTeamVer(value:Int32) -> Team.Builder {
      self.teamVer = value
      return self
    }
    public func clearTeamVer() -> Team.Builder{
         builderResult.hasTeamVer = false
         builderResult.teamVer = Int32(0)
         return self
    }
    public var hasCreator:Bool {
         get {
              return builderResult.hasCreator
         }
    }
    public var creator:String {
         get {
              return builderResult.creator
         }
         set (value) {
             builderResult.hasCreator = true
             builderResult.creator = value
         }
    }
    public func setCreator(value:String) -> Team.Builder {
      self.creator = value
      return self
    }
    public func clearCreator() -> Team.Builder{
         builderResult.hasCreator = false
         builderResult.creator = ""
         return self
    }
    public var members:Array<User> {
         get {
             return builderResult.members
         }
         set (value) {
             builderResult.members = value
         }
    }
    public func setMembers(value:Array<User>) -> Team.Builder {
      self.members = value
      return self
    }
    public func clearMembers() -> Team.Builder {
      builderResult.members.removeAll(keepCapacity: false)
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Team.Builder {
      builderResult = Team()
      return self
    }
    public override func clone() throws -> Team.Builder {
      return try Team.builderWithPrototype(builderResult)
    }
    public override func build() throws -> Team {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Team {
      let returnMe:Team = builderResult
      return returnMe
    }
    public func mergeFrom(other:Team) throws -> Team.Builder {
      if other == Team() {
       return self
      }
      if other.hasTeamKey {
           teamKey = other.teamKey
      }
      if other.hasName {
           name = other.name
      }
      if other.hasAvatarVer {
           avatarVer = other.avatarVer
      }
      if other.hasTeamVer {
           teamVer = other.teamVer
      }
      if other.hasCreator {
           creator = other.creator
      }
      if !other.members.isEmpty  {
         builderResult.members += other.members
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Team.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Team.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          teamKey = try input.readString()

        case 18 :
          name = try input.readString()

        case 24 :
          avatarVer = try input.readInt32()

        case 32 :
          teamVer = try input.readInt32()

        case 42 :
          creator = try input.readString()

        case 50 :
          let subBuilder = User.Builder()
          try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          members += [subBuilder.buildPartial()]

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class SimpleTeam : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var teamKey:String = ""

  public private(set) var hasTeamKey:Bool = false
  public private(set) var avatarVer:Int32 = Int32(0)

  public private(set) var hasAvatarVer:Bool = false
  public private(set) var teamVer:Int32 = Int32(0)

  public private(set) var hasTeamVer:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasTeamKey {
      try output.writeString(1, value:teamKey)
    }
    if hasAvatarVer {
      try output.writeInt32(2, value:avatarVer)
    }
    if hasTeamVer {
      try output.writeInt32(3, value:teamVer)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasTeamKey {
      serialize_size += teamKey.computeStringSize(1)
    }
    if hasAvatarVer {
      serialize_size += avatarVer.computeInt32Size(2)
    }
    if hasTeamVer {
      serialize_size += teamVer.computeInt32Size(3)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<SimpleTeam> {
    var mergedArray = Array<SimpleTeam>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> SimpleTeam? {
    return try SimpleTeam.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> SimpleTeam {
    return try SimpleTeam.Builder().mergeFromData(data, extensionRegistry:EntityRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> SimpleTeam {
    return try SimpleTeam.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> SimpleTeam {
    return try SimpleTeam.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> SimpleTeam {
    return try SimpleTeam.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> SimpleTeam {
    return try SimpleTeam.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SimpleTeam {
    return try SimpleTeam.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> SimpleTeam.Builder {
    return SimpleTeam.classBuilder() as! SimpleTeam.Builder
  }
  public func getBuilder() -> SimpleTeam.Builder {
    return classBuilder() as! SimpleTeam.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return SimpleTeam.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return SimpleTeam.Builder()
  }
  public func toBuilder() throws -> SimpleTeam.Builder {
    return try SimpleTeam.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:SimpleTeam) throws -> SimpleTeam.Builder {
    return try SimpleTeam.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasTeamKey {
      output += "\(indent) teamKey: \(teamKey) \n"
    }
    if hasAvatarVer {
      output += "\(indent) avatarVer: \(avatarVer) \n"
    }
    if hasTeamVer {
      output += "\(indent) teamVer: \(teamVer) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTeamKey {
             hashCode = (hashCode &* 31) &+ teamKey.hashValue
          }
          if hasAvatarVer {
             hashCode = (hashCode &* 31) &+ avatarVer.hashValue
          }
          if hasTeamVer {
             hashCode = (hashCode &* 31) &+ teamVer.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "SimpleTeam"
  }
  override public func className() -> String {
      return "SimpleTeam"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return SimpleTeam.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:SimpleTeam = SimpleTeam()
    public func getMessage() -> SimpleTeam {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasTeamKey:Bool {
         get {
              return builderResult.hasTeamKey
         }
    }
    public var teamKey:String {
         get {
              return builderResult.teamKey
         }
         set (value) {
             builderResult.hasTeamKey = true
             builderResult.teamKey = value
         }
    }
    public func setTeamKey(value:String) -> SimpleTeam.Builder {
      self.teamKey = value
      return self
    }
    public func clearTeamKey() -> SimpleTeam.Builder{
         builderResult.hasTeamKey = false
         builderResult.teamKey = ""
         return self
    }
    public var hasAvatarVer:Bool {
         get {
              return builderResult.hasAvatarVer
         }
    }
    public var avatarVer:Int32 {
         get {
              return builderResult.avatarVer
         }
         set (value) {
             builderResult.hasAvatarVer = true
             builderResult.avatarVer = value
         }
    }
    public func setAvatarVer(value:Int32) -> SimpleTeam.Builder {
      self.avatarVer = value
      return self
    }
    public func clearAvatarVer() -> SimpleTeam.Builder{
         builderResult.hasAvatarVer = false
         builderResult.avatarVer = Int32(0)
         return self
    }
    public var hasTeamVer:Bool {
         get {
              return builderResult.hasTeamVer
         }
    }
    public var teamVer:Int32 {
         get {
              return builderResult.teamVer
         }
         set (value) {
             builderResult.hasTeamVer = true
             builderResult.teamVer = value
         }
    }
    public func setTeamVer(value:Int32) -> SimpleTeam.Builder {
      self.teamVer = value
      return self
    }
    public func clearTeamVer() -> SimpleTeam.Builder{
         builderResult.hasTeamVer = false
         builderResult.teamVer = Int32(0)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> SimpleTeam.Builder {
      builderResult = SimpleTeam()
      return self
    }
    public override func clone() throws -> SimpleTeam.Builder {
      return try SimpleTeam.builderWithPrototype(builderResult)
    }
    public override func build() throws -> SimpleTeam {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> SimpleTeam {
      let returnMe:SimpleTeam = builderResult
      return returnMe
    }
    public func mergeFrom(other:SimpleTeam) throws -> SimpleTeam.Builder {
      if other == SimpleTeam() {
       return self
      }
      if other.hasTeamKey {
           teamKey = other.teamKey
      }
      if other.hasAvatarVer {
           avatarVer = other.avatarVer
      }
      if other.hasTeamVer {
           teamVer = other.teamVer
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> SimpleTeam.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> SimpleTeam.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          teamKey = try input.readString()

        case 16 :
          avatarVer = try input.readInt32()

        case 24 :
          teamVer = try input.readInt32()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class App : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var id:String = ""

  public private(set) var hasId:Bool = false
  public private(set) var name:String = ""

  public private(set) var hasName:Bool = false
  public private(set) var description_:String = ""

  public private(set) var hasDescription:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasId {
      try output.writeString(1, value:id)
    }
    if hasName {
      try output.writeString(2, value:name)
    }
    if hasDescription {
      try output.writeString(3, value:description_)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasId {
      serialize_size += id.computeStringSize(1)
    }
    if hasName {
      serialize_size += name.computeStringSize(2)
    }
    if hasDescription {
      serialize_size += description_.computeStringSize(3)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<App> {
    var mergedArray = Array<App>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> App? {
    return try App.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> App {
    return try App.Builder().mergeFromData(data, extensionRegistry:EntityRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> App {
    return try App.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> App {
    return try App.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> App {
    return try App.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> App {
    return try App.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> App {
    return try App.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> App.Builder {
    return App.classBuilder() as! App.Builder
  }
  public func getBuilder() -> App.Builder {
    return classBuilder() as! App.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return App.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return App.Builder()
  }
  public func toBuilder() throws -> App.Builder {
    return try App.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:App) throws -> App.Builder {
    return try App.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasId {
      output += "\(indent) id: \(id) \n"
    }
    if hasName {
      output += "\(indent) name: \(name) \n"
    }
    if hasDescription {
      output += "\(indent) description_: \(description_) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasId {
             hashCode = (hashCode &* 31) &+ id.hashValue
          }
          if hasName {
             hashCode = (hashCode &* 31) &+ name.hashValue
          }
          if hasDescription {
             hashCode = (hashCode &* 31) &+ description_.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "App"
  }
  override public func className() -> String {
      return "App"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return App.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:App = App()
    public func getMessage() -> App {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String) -> App.Builder {
      self.id = value
      return self
    }
    public func clearId() -> App.Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String) -> App.Builder {
      self.name = value
      return self
    }
    public func clearName() -> App.Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasDescription:Bool {
         get {
              return builderResult.hasDescription
         }
    }
    public var description_:String {
         get {
              return builderResult.description_
         }
         set (value) {
             builderResult.hasDescription = true
             builderResult.description_ = value
         }
    }
    public func setDescription(value:String) -> App.Builder {
      self.description_ = value
      return self
    }
    public func clearDescription() -> App.Builder{
         builderResult.hasDescription = false
         builderResult.description_ = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> App.Builder {
      builderResult = App()
      return self
    }
    public override func clone() throws -> App.Builder {
      return try App.builderWithPrototype(builderResult)
    }
    public override func build() throws -> App {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> App {
      let returnMe:App = builderResult
      return returnMe
    }
    public func mergeFrom(other:App) throws -> App.Builder {
      if other == App() {
       return self
      }
      if other.hasId {
           id = other.id
      }
      if other.hasName {
           name = other.name
      }
      if other.hasDescription {
           description_ = other.description_
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> App.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> App.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          id = try input.readString()

        case 18 :
          name = try input.readString()

        case 26 :
          description_ = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}


// @@protoc_insertion_point(global_scope)
